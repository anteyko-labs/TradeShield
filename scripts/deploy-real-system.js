const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ .env
require('dotenv').config();

const PRIVATE_KEY = process.env.PRIVATE_KEY;
const SEPOLIA_RPC = process.env.SEPOLIA_RPC_URL || 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161';

if (!PRIVATE_KEY) {
  console.error('‚ùå PRIVATE_KEY not found in .env file');
  process.exit(1);
}

async function deployRealSystem() {
  console.log('üöÄ Deploying REAL system with proxy contracts...');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Sepolia
  const provider = new ethers.providers.JsonRpcProvider(SEPOLIA_RPC);
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  
  console.log(`Account: ${wallet.address}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const balance = await provider.getBalance(wallet.address);
  console.log(`Balance: ${ethers.utils.formatEther(balance)} ETH`);
  
  if (balance.lt(ethers.utils.parseEther('0.01'))) {
    console.error('‚ùå Insufficient ETH balance. Need at least 0.01 ETH for deployment');
    process.exit(1);
  }
  
  try {
    // 1. –î–µ–ø–ª–æ–∏–º ProxyRegistry (–≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç)
    console.log('\nüìã Deploying ProxyRegistry...');
    const ProxyRegistryFactory = new ethers.ContractFactory(
      require('../artifacts/contracts/ProxyRegistry.sol/ProxyRegistry.json').abi,
      require('../artifacts/contracts/ProxyRegistry.sol/ProxyRegistry.json').bytecode,
      wallet
    );
    const proxyRegistry = await ProxyRegistryFactory.deploy();
    await proxyRegistry.deployed();
    console.log(`‚úÖ ProxyRegistry deployed at: ${proxyRegistry.address}`);
    
    // 2. –î–µ–ø–ª–æ–∏–º RealUSDT
    console.log('\nüí∞ Deploying RealUSDT...');
    const RealUSDTFactory = new ethers.ContractFactory(
      require('../artifacts/contracts/RealUSDT.sol/RealUSDT.json').abi,
      require('../artifacts/contracts/RealUSDT.sol/RealUSDT.json').bytecode,
      wallet
    );
    const realUSDT = await RealUSDTFactory.deploy();
    await realUSDT.deployed();
    console.log(`‚úÖ RealUSDT deployed at: ${realUSDT.address}`);
    
    // 3. –î–µ–ø–ª–æ–∏–º RealUserWallet
    console.log('\nüëõ Deploying RealUserWallet...');
    const RealUserWalletFactory = new ethers.ContractFactory(
      require('../artifacts/contracts/RealUserWallet.sol/RealUserWallet.json').abi,
      require('../artifacts/contracts/RealUserWallet.sol/RealUserWallet.json').bytecode,
      wallet
    );
    const realWallet = await RealUserWalletFactory.deploy(proxyRegistry.address);
    await realWallet.deployed();
    console.log(`‚úÖ RealUserWallet deployed at: ${realWallet.address}`);
    
    // 4. –î–µ–ø–ª–æ–∏–º RealDEX
    console.log('\nüîÑ Deploying RealDEX...');
    const RealDEXFactory = new ethers.ContractFactory(
      require('../artifacts/contracts/RealDEX.sol/RealDEX.json').abi,
      require('../artifacts/contracts/RealDEX.sol/RealDEX.json').bytecode,
      wallet
    );
    const realDEX = await RealDEXFactory.deploy(proxyRegistry.address, realWallet.address);
    await realDEX.deployed();
    console.log(`‚úÖ RealDEX deployed at: ${realDEX.address}`);
    
    // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
    console.log('\nüîß Configuring proxy contracts...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –ø—Ä–æ–∫—Å–∏
    await proxyRegistry.setUSDTToken(realUSDT.address);
    await proxyRegistry.setWallet(realWallet.address);
    await proxyRegistry.setDEX(realDEX.address);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
    await realUSDT.setWallet(realWallet.address);
    await realUSDT.setDEX(realDEX.address);
    await realWallet.setDEX(realDEX.address);
    
    console.log('‚úÖ Proxy configuration complete');
    
    // 6. –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
    console.log('\nüìà Creating trading pairs...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC (–º–æ–∫–æ–≤–∞—è)
    const mockBTC = '0x0000000000000000000000000000000000000001'; // –ú–æ–∫–æ–≤—ã–π BTC
    await realDEX.createPair(realUSDT.address, mockBTC, ethers.utils.parseUnits('100000', 6), ethers.utils.parseUnits('1', 8));
    console.log('‚úÖ USDT/BTC pair created');
    
    // 7. –ú–∏–Ω—Ç–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ USDT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüí∏ Minting initial USDT...');
    await realUSDT.mint(wallet.address, ethers.utils.parseUnits('1000000', 6)); // 1M USDT
    console.log('‚úÖ 1M USDT minted for testing');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞
    const contractAddresses = {
      proxyRegistry: proxyRegistry.address,
      realUSDT: realUSDT.address,
      realWallet: realWallet.address,
      realDEX: realDEX.address,
      network: 'sepolia',
      chainId: 11155111
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const addressesPath = path.join(__dirname, '../contract-addresses.json');
    fs.writeFileSync(addressesPath, JSON.stringify(contractAddresses, null, 2));
    
    console.log('\nüéâ REAL SYSTEM DEPLOYMENT SUCCESSFUL!');
    console.log('\nüìã Contract Addresses:');
    console.log(`ProxyRegistry: ${proxyRegistry.address}`);
    console.log(`RealUSDT: ${realUSDT.address}`);
    console.log(`RealWallet: ${realWallet.address}`);
    console.log(`RealDEX: ${realDEX.address}`);
    
    console.log('\nüìù Add these to your .env file:');
    console.log(`VITE_PROXY_REGISTRY_ADDRESS=${proxyRegistry.address}`);
    console.log(`VITE_REAL_USDT_ADDRESS=${realUSDT.address}`);
    console.log(`VITE_REAL_WALLET_ADDRESS=${realWallet.address}`);
    console.log(`VITE_REAL_DEX_ADDRESS=${realDEX.address}`);
    
    console.log('\n‚úÖ All contracts deployed successfully!');
    console.log('‚úÖ Proxy system configured');
    console.log('‚úÖ Real USDT with initial balance ready');
    console.log('‚úÖ Trading pairs created');
    console.log('‚úÖ Ready for REAL trading!');
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error);
    process.exit(1);
  }
}

deployRealSystem();
