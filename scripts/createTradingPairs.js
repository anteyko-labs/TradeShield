// –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–†
const { ethers } = require('ethers');

async function createTradingPairs() {
  console.log('üìä –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–†');
  console.log('='.repeat(50));
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
  const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia...');
  console.log('üë§ –ê–¥—Ä–µ—Å:', wallet.address);
  
  // –ê–¥—Ä–µ—Å–∞
  const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
  const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  
  // ABI –¥–ª—è DEX
  const DEX_ABI = [
    "function createPair(address tokenA, address tokenB, uint256 initialAmountA, uint256 initialAmountB) external",
    "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
    "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)",
    "function owner() external view returns (address)"
  ];
  
  const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, wallet);
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ DEX...');
    const owner = await dexContract.owner();
    console.log('üëë –í–ª–∞–¥–µ–ª–µ—Ü DEX:', owner);
    
    if (owner.toLowerCase() !== wallet.address.toLowerCase()) {
      console.log('‚ùå –ú—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü DEX!');
      return;
    }
    
    console.log('‚úÖ –ú—ã –≤–ª–∞–¥–µ–ª–µ—Ü DEX!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const usdtContract = new ethers.Contract(USDT_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)"
    ], wallet);
    
    const btcContract = new ethers.Contract(BTC_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)"
    ], wallet);
    
    const ethContract = new ethers.Contract(ETH_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)"
    ], wallet);
    
    const userAddress = wallet.address;
    
    const userUsdtBalance = await usdtContract.balanceOf(userAddress);
    const userBtcBalance = await btcContract.balanceOf(userAddress);
    const userEthBalance = await ethContract.balanceOf(userAddress);
    
    console.log('üíµ USDT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ethers.utils.formatUnits(userUsdtBalance, 6));
    console.log('‚Çø BTC —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ethers.utils.formatUnits(userBtcBalance, 8));
    console.log('Œû ETH —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ethers.utils.formatUnits(userEthBalance, 18));
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC
    console.log('\nüìä –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC...');
    
    const initialUSDT = ethers.utils.parseUnits('1000', 6); // 1000 USDT
    const initialBTC = ethers.utils.parseUnits('0.01', 8);  // 0.01 BTC
    
    console.log('üíµ –ù–∞—á–∞–ª—å–Ω–∞—è USDT:', ethers.utils.formatUnits(initialUSDT, 6));
    console.log('‚Çø –ù–∞—á–∞–ª—å–Ω–∞—è BTC:', ethers.utils.formatUnits(initialBTC, 8));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–∫–µ–Ω–æ–≤
    if (userUsdtBalance.lt(initialUSDT)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã!');
      return;
    }
    
    if (userBtcBalance.lt(initialBTC)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã!');
      return;
    }
    
    // –û–¥–æ–±—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è DEX
    console.log('üîê –û–¥–æ–±—Ä—è–µ–º USDT –¥–ª—è DEX...');
    const approveUsdtTx = await usdtContract.approve(DEX_ADDRESS, initialUSDT);
    await approveUsdtTx.wait();
    console.log('‚úÖ USDT –æ–¥–æ–±—Ä–µ–Ω!');
    
    console.log('üîê –û–¥–æ–±—Ä—è–µ–º BTC –¥–ª—è DEX...');
    const approveBtcTx = await btcContract.approve(DEX_ADDRESS, initialBTC);
    await approveBtcTx.wait();
    console.log('‚úÖ BTC –æ–¥–æ–±—Ä–µ–Ω!');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
    console.log('üìä –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC...');
    const createPairTx = await dexContract.createPair(
      USDT_ADDRESS,
      BTC_ADDRESS,
      initialUSDT,
      initialBTC
    );
    
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    await createPairTx.wait();
    
    console.log('‚úÖ –ü–∞—Ä–∞ USDT/BTC —Å–æ–∑–¥–∞–Ω–∞!');
    console.log('üîó TX Hash:', createPairTx.hash);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã USDT/BTC...');
    const reserves = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
    console.log('üíµ USDT —Ä–µ–∑–µ—Ä–≤:', ethers.utils.formatUnits(reserves[0], 6));
    console.log('‚Çø BTC —Ä–µ–∑–µ—Ä–≤:', ethers.utils.formatUnits(reserves[1], 8));
    
    console.log('\nüéØ –ü–ê–†–ê –°–û–ó–î–ê–ù–ê!');
    console.log('‚úÖ USDT/BTC –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    console.log('‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã:', error.message);
    
    if (error.message.includes('execution reverted')) {
      console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
      console.log('1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤');
      console.log('2. –¢–æ–∫–µ–Ω—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã');
      console.log('3. –ü–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º');
    }
  }
}

createTradingPairs();