// –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–† –í DEX –ö–û–ù–¢–†–ê–ö–¢–ï
const { ethers } = require('ethers');

async function createTradingPairs() {
  console.log('üîß –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –ü–ê–† –í DEX –ö–û–ù–¢–†–ê–ö–¢–ï');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // –ê–¥—Ä–µ—Å–∞
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    // ABI –¥–ª—è DEX
    const DEX_ABI = [
      "function createPair(address tokenA, address tokenB, uint256 initialAmountA, uint256 initialAmountB) external",
      "function owner() view returns (address)"
    ];
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function decimals() view returns (uint8)"
    ];
    
    const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, wallet);
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, wallet);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, wallet);
    const ethContract = new ethers.Contract(ETH_ADDRESS, TOKEN_ABI, wallet);
    
    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const owner = await dexContract.owner();
    console.log(`üëë –í–ª–∞–¥–µ–ª–µ—Ü DEX: ${owner}`);
    
    if (owner.toLowerCase() !== wallet.address.toLowerCase()) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    const usdtBalance = await usdtContract.balanceOf(wallet.address);
    const btcBalance = await btcContract.balanceOf(wallet.address);
    const ethBalance = await ethContract.balanceOf(wallet.address);
    
    console.log('\nüìä –ë–ê–õ–ê–ù–°–´:');
    console.log(`üí∞ USDT: ${ethers.utils.formatUnits(usdtBalance, 6)}`);
    console.log(`üí∞ BTC: ${ethers.utils.formatUnits(btcBalance, 8)}`);
    console.log(`üí∞ ETH: ${ethers.utils.formatUnits(ethBalance, 18)}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC
    if (usdtBalance.gt(0) && btcBalance.gt(0)) {
      console.log('\nüîÑ –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC...');
      
      // –û–¥–æ–±—Ä—è–µ–º —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤
      const usdtApproveTx = await usdtContract.approve(DEX_ADDRESS, usdtBalance);
      await usdtApproveTx.wait();
      console.log('‚úÖ USDT –æ–¥–æ–±—Ä–µ–Ω');
      
      const btcApproveTx = await btcContract.approve(DEX_ADDRESS, btcBalance);
      await btcApproveTx.wait();
      console.log('‚úÖ BTC –æ–¥–æ–±—Ä–µ–Ω');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
      const createPairTx = await dexContract.createPair(
        USDT_ADDRESS,
        BTC_ADDRESS,
        usdtBalance,
        btcBalance
      );
      
      await createPairTx.wait();
      console.log(`‚úÖ –ü–∞—Ä–∞ USDT/BTC —Å–æ–∑–¥–∞–Ω–∞! TX: ${createPairTx.hash}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/ETH
    if (usdtBalance.gt(0) && ethBalance.gt(0)) {
      console.log('\nüîÑ –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/ETH...');
      
      // –û–¥–æ–±—Ä—è–µ–º —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤
      const usdtApproveTx = await usdtContract.approve(DEX_ADDRESS, usdtBalance);
      await usdtApproveTx.wait();
      console.log('‚úÖ USDT –æ–¥–æ–±—Ä–µ–Ω');
      
      const ethApproveTx = await ethContract.approve(DEX_ADDRESS, ethBalance);
      await ethApproveTx.wait();
      console.log('‚úÖ ETH –æ–¥–æ–±—Ä–µ–Ω');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
      const createPairTx = await dexContract.createPair(
        USDT_ADDRESS,
        ETH_ADDRESS,
        usdtBalance,
        ethBalance
      );
      
      await createPairTx.wait();
      console.log(`‚úÖ –ü–∞—Ä–∞ USDT/ETH —Å–æ–∑–¥–∞–Ω–∞! TX: ${createPairTx.hash}`);
    }
    
    console.log('\n‚úÖ –¢–û–†–ì–û–í–´–ï –ü–ê–†–´ –°–û–ó–î–ê–ù–´!');
    console.log('–¢–µ–ø–µ—Ä—å –±–æ—Ç—ã –º–æ–≥—É—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

createTradingPairs();
