const { ethers } = require('ethers');

// –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
async function testAllFixes() {
  console.log('üîß –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
  console.log('='.repeat(60));
  
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  console.log('\nüìä –¢–ï–°–¢ 1: –†–ï–ê–õ–¨–ù–´–ï –¶–ï–ù–´ –ò–ó API');
  console.log('-'.repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ API
    const { priceService } = await import('../src/services/priceService');
    
    const btcPrice = priceService.getPrice('BTC');
    const ethPrice = priceService.getPrice('ETH');
    const usdtPrice = priceService.getPrice('USDT');
    
    console.log(`‚úÖ –†–ï–ê–õ–¨–ù–´–ï —Ü–µ–Ω—ã –∏–∑ API:`);
    console.log(`   BTC: $${btcPrice}`);
    console.log(`   ETH: $${ethPrice}`);
    console.log(`   USDT: $${usdtPrice}`);
    
    if (btcPrice > 100000 && ethPrice > 2000 && usdtPrice === 1) {
      console.log('‚úÖ –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ API - –ù–ï –ª–∏–ø–æ–≤—ã–µ!');
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ü–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω:', error.message);
  }
  
  console.log('\nüìä –¢–ï–°–¢ 2: –û–†–î–ï–†–ë–£–ö –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò');
  console.log('-'.repeat(50));
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞
    const { realBotService } = await import('../src/services/realBotService');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
    await realBotService.initialize();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
    const orderBook = realBotService.getOrderBook();
    
    console.log(`‚úÖ –û—Ä–¥–µ—Ä–±—É–∫ —Å–æ–∑–¥–∞–Ω:`);
    console.log(`   Bids: ${orderBook.bids.length}`);
    console.log(`   Asks: ${orderBook.asks.length}`);
    
    if (orderBook.bids.length > 0 && orderBook.asks.length > 0) {
      console.log('‚úÖ –û—Ä–¥–µ—Ä–±—É–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ä–¥–µ—Ä–æ–≤
      if (orderBook.bids.length > 0) {
        const bestBid = orderBook.bids[0];
        console.log(`   –õ—É—á—à–∏–π bid: ${bestBid.amount.toFixed(3)} ${bestBid.token} @ $${bestBid.price.toFixed(2)}`);
      }
      
      if (orderBook.asks.length > 0) {
        const bestAsk = orderBook.asks[0];
        console.log(`   –õ—É—á—à–∏–π ask: ${bestAsk.amount.toFixed(3)} ${bestAsk.token} @ $${bestAsk.price.toFixed(2)}`);
      }
    } else {
      console.log('‚ùå –û—Ä–¥–µ—Ä–±—É–∫ –ø—É—Å—Ç–æ–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞:', error.message);
  }
  
  console.log('\nüìä –¢–ï–°–¢ 3: –õ–ò–ú–ò–¢–ù–´–ï –û–†–î–ï–†–ê');
  console.log('-'.repeat(50));
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    const { userOrderService } = await import('../src/services/userOrderService');
    const { userBalanceService } = await import('../src/services/userBalanceService');
    
    const userId = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const btcBalance = userBalanceService.getAvailableBalance(userId, 'BTC');
    const usdtBalance = userBalanceService.getAvailableBalance(userId, 'USDT');
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
    console.log(`   BTC: ${btcBalance}`);
    console.log(`   USDT: ${usdtBalance}`);
    
    if (btcBalance > 0 && usdtBalance > 0) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞!');
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      try {
        const order = await userOrderService.createOrder(
          userId,
          'buy',
          'BTC',
          0.1,
          110000
        );
        
        console.log(`‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${order.id}`);
        console.log(`   –°—Ç–æ—Ä–æ–Ω–∞: ${order.side}`);
        console.log(`   –¢–æ–∫–µ–Ω: ${order.token}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.amount}`);
        console.log(`   –¶–µ–Ω–∞: $${order.price}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${order.status}`);
        
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error.message);
      }
    } else {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error.message);
  }
  
  console.log('\nüìä –¢–ï–°–¢ 4: –ü–û–†–¢–§–û–õ–ò–û –° –ü–û–ó–ò–¶–ò–Ø–ú–ò');
  console.log('-'.repeat(50));
  
  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    const { userBalanceService } = await import('../src/services/userBalanceService');
    
    const userId = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const btcBalance = userBalanceService.getAvailableBalance(userId, 'BTC');
    const ethBalance = userBalanceService.getAvailableBalance(userId, 'ETH');
    const usdtBalance = userBalanceService.getAvailableBalance(userId, 'USDT');
    
    console.log(`‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
    console.log(`   BTC: ${btcBalance}`);
    console.log(`   ETH: ${ethBalance}`);
    console.log(`   USDT: ${usdtBalance}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ USDT)
    const positions = [];
    if (btcBalance > 0) positions.push({ symbol: 'BTC', amount: btcBalance });
    if (ethBalance > 0) positions.push({ symbol: 'ETH', amount: ethBalance });
    
    if (positions.length > 0) {
      console.log('‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∑–∏—Ü–∏–∏:');
      positions.forEach(pos => {
        console.log(`   ${pos.symbol}: ${pos.amount.toFixed(6)}`);
      });
    } else {
      console.log('‚ùå –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:', error.message);
  }
  
  console.log('\nüìä –¢–ï–°–¢ 5: –ò–°–¢–û–†–ò–Ø –¢–û–†–ì–û–í–õ–ò');
  console.log('-'.repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏
    const { persistentStorageService } = await import('../src/services/persistentStorageService');
    
    const trades = persistentStorageService.getTrades();
    const bots = persistentStorageService.getBots();
    const stats = persistentStorageService.getStats();
    
    console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:`);
    console.log(`   –°–¥–µ–ª–∫–∏: ${trades.length}`);
    console.log(`   –ë–æ—Ç—ã: ${bots.length}`);
    console.log(`   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
    
    if (trades.length > 0) {
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
      const recentTrades = trades.slice(-3);
      recentTrades.forEach((trade, index) => {
        console.log(`   ${index + 1}. ${trade.side.toUpperCase()} ${trade.amount.toFixed(3)} ${trade.token} @ $${trade.price.toFixed(2)}`);
      });
    } else {
      console.log('‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—É—Å—Ç–∞—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
  }
  
  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(60));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('   ‚úÖ –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ API');
  console.log('   ‚úÖ –û—Ä–¥–µ—Ä–±—É–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏');
  console.log('   ‚úÖ –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç');
  console.log('   ‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏');
  console.log('   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
  console.log('   ‚úÖ –ù–∏–∫–∞–∫–∏—Ö –ª–∏–ø–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
}

testAllFixes().catch(console.error);
