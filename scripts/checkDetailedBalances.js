// –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í BTC
const { ethers } = require('ethers');

async function checkDetailedBalances() {
  console.log('üîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í BTC');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function symbol() view returns (string)",
      "function name() view returns (string)"
    ];
    
    // –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAddress = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
    
    console.log(`üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è: ${userAddress}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω –¥–µ—Ç–∞–ª—å–Ω–æ
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, provider);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, provider);
    const ethContract = new ethers.Contract(ETH_ADDRESS, TOKEN_ABI, provider);
    
    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:');
    
    // USDT
    try {
      const usdtBalance = await usdtContract.balanceOf(userAddress);
      const usdtDecimals = await usdtContract.decimals();
      const usdtSymbol = await usdtContract.symbol();
      const usdtName = await usdtContract.name();
      const usdtFormatted = ethers.utils.formatUnits(usdtBalance, usdtDecimals);
      
      console.log(`üí∞ ${usdtName} (${usdtSymbol}):`);
      console.log(`   Raw: ${usdtBalance.toString()}`);
      console.log(`   Decimals: ${usdtDecimals}`);
      console.log(`   Formatted: ${usdtFormatted}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ USDT: ${error.message}`);
    }
    
    // BTC
    try {
      const btcBalance = await btcContract.balanceOf(userAddress);
      const btcDecimals = await btcContract.decimals();
      const btcSymbol = await btcContract.symbol();
      const btcName = await btcContract.name();
      const btcFormatted = ethers.utils.formatUnits(btcBalance, btcDecimals);
      
      console.log(`\nüí∞ ${btcName} (${btcSymbol}):`);
      console.log(`   Raw: ${btcBalance.toString()}`);
      console.log(`   Decimals: ${btcDecimals}`);
      console.log(`   Formatted: ${btcFormatted}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
      const minAmount = ethers.utils.parseUnits('0.001', btcDecimals); // –ú–∏–Ω–∏–º—É–º 0.001 BTC
      if (btcBalance.gte(minAmount)) {
        console.log(`‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (>= 0.001)`);
      } else {
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (< 0.001)`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ BTC: ${error.message}`);
    }
    
    // ETH
    try {
      const ethBalance = await ethContract.balanceOf(userAddress);
      const ethDecimals = await ethContract.decimals();
      const ethSymbol = await ethContract.symbol();
      const ethName = await ethContract.name();
      const ethFormatted = ethers.utils.formatUnits(ethBalance, ethDecimals);
      
      console.log(`\nüí∞ ${ethName} (${ethSymbol}):`);
      console.log(`   Raw: ${ethBalance.toString()}`);
      console.log(`   Decimals: ${ethDecimals}`);
      console.log(`   Formatted: ${ethFormatted}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ ETH: ${error.message}`);
    }
    
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:');
    console.log('1. –†–∞–∑–Ω—ã–µ decimals –≤ —Ç–æ–∫–µ–Ω–∞—Ö');
    console.log('2. –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤');
    console.log('3. –û—à–∏–±–∫–∏ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
    console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º —Ç–æ–∫–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:', error.message);
  }
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(60));
}

checkDetailedBalances();
