// –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–• –¢–û–ö–ï–ù–û–í
const { ethers } = require('ethers');

async function checkFrozenTokens() {
  console.log('üîß –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–• –¢–û–ö–ï–ù–û–í');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function allowance(address owner, address spender) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ];
    
    // –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAddress = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
    
    console.log(`üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è: ${userAddress}`);
    
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, provider);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const btcBalance = await btcContract.balanceOf(userAddress);
    const btcDecimals = await btcContract.decimals();
    const btcFormatted = ethers.utils.formatUnits(btcBalance, btcDecimals);
    
    console.log(`\nüìä BTC –ë–ê–õ–ê–ù–°:`);
    console.log(`üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${btcFormatted} BTC`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É)
    const allowance = await btcContract.allowance(userAddress, DEX_ADDRESS);
    const allowanceFormatted = ethers.utils.formatUnits(allowance, btcDecimals);
    
    console.log(`üîí –†–∞–∑—Ä–µ—à–µ–Ω–æ DEX: ${allowanceFormatted} BTC`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const availableBalance = btcBalance.sub(allowance);
    const availableFormatted = ethers.utils.formatUnits(availableBalance, btcDecimals);
    
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${availableFormatted} BTC`);
    
    if (allowance.gt(0)) {
      console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ${allowanceFormatted} BTC –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –¥–ª—è DEX!`);
      console.log(`üí° –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–¥–∞–∂–µ–π`);
    } else {
      console.log(`‚úÖ –ù–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è DEX`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
    const minAmount = ethers.utils.parseUnits('0.001', btcDecimals);
    if (btcBalance.gte(minAmount)) {
      console.log(`‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (>= 0.001)`);
    } else {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (< 0.001)`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
  }
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(60));
}

checkFrozenTokens();
