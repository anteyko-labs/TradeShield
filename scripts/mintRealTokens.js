// MINTING –†–ï–ê–õ–¨–ù–´–• –¢–û–ö–ï–ù–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
const { ethers } = require('ethers');

async function mintRealTokens() {
  console.log('üîß MINTING –†–ï–ê–õ–¨–ù–´–• –¢–û–ö–ï–ù–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
    const privateKey = 'YOUR_PRIVATE_KEY_HERE'; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô!
    
    if (privateKey === 'YOUR_PRIVATE_KEY_HERE') {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ privateKey –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!');
      console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ MetaMask');
      console.log('2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ ‚Üí Account Details ‚Üí Export Private Key');
      console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
      console.log('4. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ –≤–∞—à –∫–ª—é—á');
      return;
    }
    
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ (–Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è mint)
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function mint(address to, uint256 amount) external",
      "function symbol() view returns (string)"
    ];
    
    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è mint
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, wallet);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, wallet);
    const ethContract = new ethers.Contract(ETH_ADDRESS, TOKEN_ABI, wallet);
    
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–ê–ö–¢–û–í:');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º USDT
      const usdtSymbol = await usdtContract.symbol();
      console.log(`‚úÖ USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${usdtSymbol}`);
    } catch (error) {
      console.log(`‚ùå USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${error.message}`);
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC
      const btcSymbol = await btcContract.symbol();
      console.log(`‚úÖ BTC –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${btcSymbol}`);
    } catch (error) {
      console.log(`‚ùå BTC –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${error.message}`);
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH
      const ethSymbol = await ethContract.symbol();
      console.log(`‚úÖ ETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${ethSymbol}`);
    } catch (error) {
      console.log(`‚ùå ETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç: ${error.message}`);
    }
    
    console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è mint - –º–æ–∂–µ–º –¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã');
    console.log('2. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥');
    console.log('3. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å mint —Ñ—É–Ω–∫—Ü–∏–µ–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

mintRealTokens();
