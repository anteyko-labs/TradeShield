// –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô DEX –ö–û–ù–¢–†–ê–ö–¢–ê
const { ethers } = require('ethers');

async function checkDEXFunctions() {
  console.log('üîß –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô DEX –ö–û–ù–¢–†–ê–ö–¢–ê');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å DEX
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    
    console.log(`üè¶ DEX –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${DEX_ADDRESS}`);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const functions = [
      'addLiquidity',
      'removeLiquidity', 
      'swap',
      'getAmountOut',
      'getReserves',
      'balanceOf',
      'totalSupply'
    ];
    
    console.log('\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –§–£–ù–ö–¶–ò–ò:');
    
    for (const funcName of functions) {
      try {
        // –°–æ–∑–¥–∞–µ–º ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        const abi = [`function ${funcName}() view returns (uint256)`];
        const contract = new ethers.Contract(DEX_ADDRESS, abi, provider);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        await contract[funcName]();
        console.log(`‚úÖ ${funcName} - —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } catch (error) {
        console.log(`‚ùå ${funcName} - ${error.message.split('\n')[0]}`);
      }
    }
    
    console.log('\nüí° –í–´–í–û–î:');
    console.log('‚ùå DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å addLiquidity');
    console.log('‚ùå –ò–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É');
    console.log('‚ùå –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    
    console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
    console.log('3. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(60));
}

checkDEXFunctions();
