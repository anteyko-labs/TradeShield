// –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô DEX
const { ethers } = require('ethers');

async function checkDEXFunctions() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô DEX');
  console.log('='.repeat(50));
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
  const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia...');
  console.log('üë§ –ê–¥—Ä–µ—Å:', wallet.address);
  
  // –ê–¥—Ä–µ—Å–∞
  const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
  const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  
  // –ü—Ä–æ—Å—Ç–æ–π ABI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const DEX_ABI = [
    "function owner() external view returns (address)",
    "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)"
  ];
  
  const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, wallet);
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ DEX...');
    const owner = await dexContract.owner();
    console.log('üëë –í–ª–∞–¥–µ–ª–µ—Ü DEX:', owner);
    console.log('üë§ –ù–∞—à –∞–¥—Ä–µ—Å:', wallet.address);
    
    if (owner.toLowerCase() !== wallet.address.toLowerCase()) {
      console.log('‚ùå –ú—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü DEX!');
      return;
    }
    
    console.log('‚úÖ –ú—ã –≤–ª–∞–¥–µ–ª–µ—Ü DEX!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã –ø–∞—Ä
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã –ø–∞—Ä...');
    
    try {
      const usdtBtcReserves = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
      console.log('üíµ/‚Çø USDT/BTC —Ä–µ–∑–µ—Ä–≤—ã:', ethers.utils.formatUnits(usdtBtcReserves[0], 6), '/', ethers.utils.formatUnits(usdtBtcReserves[1], 8));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ USDT/BTC:', error.message);
    }
    
    try {
      const usdtEthReserves = await dexContract.getReserves(USDT_ADDRESS, ETH_ADDRESS);
      console.log('üíµ/Œû USDT/ETH —Ä–µ–∑–µ—Ä–≤—ã:', ethers.utils.formatUnits(usdtEthReserves[0], 6), '/', ethers.utils.formatUnits(usdtEthReserves[1], 18));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ USDT/ETH:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ DEX...');
    
    const usdtContract = new ethers.Contract(USDT_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)"
    ], provider);
    
    const btcContract = new ethers.Contract(BTC_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)"
    ], provider);
    
    const ethContract = new ethers.Contract(ETH_ADDRESS, [
      "function balanceOf(address owner) view returns (uint256)"
    ], provider);
    
    try {
      const usdtBalance = await usdtContract.balanceOf(DEX_ADDRESS);
      console.log('üíµ USDT –≤ DEX:', ethers.utils.formatUnits(usdtBalance, 6));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT:', error.message);
    }
    
    try {
      const btcBalance = await btcContract.balanceOf(DEX_ADDRESS);
      console.log('‚Çø BTC –≤ DEX:', ethers.utils.formatUnits(btcBalance, 8));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ BTC:', error.message);
    }
    
    try {
      const ethBalance = await ethContract.balanceOf(DEX_ADDRESS);
      console.log('Œû ETH –≤ DEX:', ethers.utils.formatUnits(ethBalance, 18));
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ETH:', error.message);
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('‚úÖ –ú—ã –≤–ª–∞–¥–µ–ª–µ—Ü');
    console.log('‚ùå –ù–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø–∞—Ä–∞—Ö');
    console.log('üí° –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX:', error.message);
  }
}

checkDEXFunctions();