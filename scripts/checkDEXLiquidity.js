// –ü–†–û–í–ï–†–ö–ê –õ–ò–ö–í–ò–î–ù–û–°–¢–ò DEX –ö–û–ù–¢–†–ê–ö–¢–ê
const { ethers } = require('ethers');

async function checkDEXLiquidity() {
  console.log('üîß –ü–†–û–í–ï–†–ö–ê –õ–ò–ö–í–ò–î–ù–û–°–¢–ò DEX –ö–û–ù–¢–†–ê–ö–¢–ê');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    // ABI –¥–ª—è DEX
    const DEX_ABI = [
      "function getReserves(address tokenA, address tokenB) view returns (uint256 reserveA, uint256 reserveB)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountOut)",
      "function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external"
    ];
    
    const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, provider);
    
    console.log(`üè¶ DEX –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${DEX_ADDRESS}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã USDT/BTC
    try {
      const [usdtReserve, btcReserve] = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
      console.log(`\nüìä –†–ï–ó–ï–†–í–´ USDT/BTC:`);
      console.log(`üí∞ USDT: ${ethers.utils.formatUnits(usdtReserve, 6)}`);
      console.log(`üí∞ BTC: ${ethers.utils.formatUnits(btcReserve, 8)}`);
      
      if (usdtReserve.eq(0) && btcReserve.eq(0)) {
        console.log('‚ùå –ù–ï–¢ –õ–ò–ö–í–ò–î–ù–û–°–¢–ò! –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX');
      } else {
        console.log('‚úÖ –ï—Å—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX');
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ USDT/BTC: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã USDT/ETH
    try {
      const [usdtReserve, ethReserve] = await dexContract.getReserves(USDT_ADDRESS, ETH_ADDRESS);
      console.log(`\nüìä –†–ï–ó–ï–†–í–´ USDT/ETH:`);
      console.log(`üí∞ USDT: ${ethers.utils.formatUnits(usdtReserve, 6)}`);
      console.log(`üí∞ ETH: ${ethers.utils.formatUnits(ethReserve, 18)}`);
      
      if (usdtReserve.eq(0) && ethReserve.eq(0)) {
        console.log('‚ùå –ù–ï–¢ –õ–ò–ö–í–ò–î–ù–û–°–¢–ò! –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX');
      } else {
        console.log('‚úÖ –ï—Å—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX');
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ USDT/ETH: ${error.message}`);
    }
    
    console.log('\nüí° –ü–†–û–ë–õ–ï–ú–ê:');
    console.log('‚ùå –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –±–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å');
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å');
    console.log('‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    
    console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
    console.log('3. –ò–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±–æ—Ç–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(60));
}

checkDEXLiquidity();
