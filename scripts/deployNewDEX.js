// –î–ï–ü–õ–û–ô –ù–û–í–û–ì–û DEX –ö–û–ù–¢–†–ê–ö–¢–ê
const { ethers } = require('ethers');

async function deployNewDEX() {
  console.log('üîß –î–ï–ü–õ–û–ô –ù–û–í–û–ì–û DEX –ö–û–ù–¢–†–ê–ö–¢–ê');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
    const wallet = new ethers.Wallet(privateKey, provider);
    
    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    
    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const contractSource = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract SimpleWorkingDEX {
    mapping(address => mapping(address => uint256)) public reserves;
    mapping(address => mapping(address => bool)) public pairs;
    
    address public owner;
    uint256 public constant FEE_PERCENTAGE = 30; // 0.3%
    uint256 public constant FEE_DENOMINATOR = 10000;
    
    event Swap(address indexed user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);
    event LiquidityAdded(address indexed user, address tokenA, address tokenB, uint256 amountA, uint256 amountB);
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }
    
    constructor() {
        owner = msg.sender;
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountA,
        uint256 amountB
    ) external {
        require(tokenA != tokenB, "Same token");
        require(amountA > 0 && amountB > 0, "Invalid amounts");
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        require(transferToken(tokenA, msg.sender, address(this), amountA), "Transfer A failed");
        require(transferToken(tokenB, msg.sender, address(this), amountB), "Transfer B failed");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
        reserves[tokenA][tokenB] += amountA;
        reserves[tokenB][tokenA] += amountB;
        pairs[tokenA][tokenB] = true;
        pairs[tokenB][tokenA] = true;
        
        emit LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB);
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ
    function getAmountOut(
        address tokenIn,
        address tokenOut,
        uint256 amountIn
    ) external view returns (uint256) {
        require(pairs[tokenIn][tokenOut], "Pair does not exist");
        
        uint256 reserveIn = reserves[tokenIn][tokenOut];
        uint256 reserveOut = reserves[tokenOut][tokenIn];
        
        if (reserveIn == 0 || reserveOut == 0) {
            return 0;
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: amountOut = (amountIn * reserveOut) / reserveIn
        uint256 amountOut = (amountIn * reserveOut) / reserveIn;
        
        // –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        uint256 fee = (amountOut * FEE_PERCENTAGE) / FEE_DENOMINATOR;
        return amountOut - fee;
    }
    
    // –°–≤–∞–ø —Ç–æ–∫–µ–Ω–æ–≤
    function swap(
        address tokenIn,
        address tokenOut,
        uint256 amountIn,
        uint256 minAmountOut
    ) external {
        require(pairs[tokenIn][tokenOut], "Pair does not exist");
        require(amountIn > 0, "Invalid amount");
        
        uint256 amountOut = this.getAmountOut(tokenIn, tokenOut, amountIn);
        require(amountOut >= minAmountOut, "Insufficient output amount");
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        require(transferToken(tokenIn, msg.sender, address(this), amountIn), "Transfer in failed");
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        require(transferToken(tokenOut, address(this), msg.sender, amountOut), "Transfer out failed");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
        reserves[tokenIn][tokenOut] += amountIn;
        reserves[tokenOut][tokenIn] -= amountOut;
        
        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut);
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
    function transferToken(address token, address from, address to, uint256 amount) internal returns (bool) {
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSignature("transferFrom(address,address,uint256)", from, to, amount)
        );
        return success && (data.length == 0 || abi.decode(data, (bool)));
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤—ã –ø–∞—Ä—ã
    function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256) {
        return (reserves[tokenA][tokenB], reserves[tokenB][tokenA]);
    }
}
    `;
    
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç...');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const factory = new ethers.ContractFactory(
      [
        "constructor()",
        "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
        "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
        "function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external",
        "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)",
        "function owner() view returns (address)"
      ],
      contractSource,
      wallet
    );
    
    // –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    console.log('üöÄ –î–µ–ø–ª–æ–∏–º –Ω–æ–≤—ã–π DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç...');
    const contract = await factory.deploy();
    await contract.deployed();
    
    console.log(`‚úÖ –ù–æ–≤—ã–π DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–µ–ø–ª–æ–µ–Ω! –ê–¥—Ä–µ—Å: ${contract.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const owner = await contract.owner();
    console.log(`üëë –í–ª–∞–¥–µ–ª–µ—Ü: ${owner}`);
    
    console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å DEX –≤ userTradingService.ts');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

deployNewDEX();
