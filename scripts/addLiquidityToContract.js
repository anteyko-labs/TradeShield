// –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò –í DEX –ö–û–ù–¢–†–ê–ö–¢
const { ethers } = require('ethers');

async function addLiquidityToContract() {
  console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ö–í–ò–î–ù–û–°–¢–ò –í DEX –ö–û–ù–¢–†–ê–ö–¢');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    
    // ABI –¥–ª—è DEX
    const DEX_ABI = [
      "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
      "function createPair(address tokenA, address tokenB) external",
      "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)",
      "function owner() external view returns (address)"
    ];
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function transfer(address to, uint256 amount) returns (bool)"
    ];
    
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–ê–ö–¢–ê:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, provider);
    const owner = await dexContract.owner();
    console.log(`üë§ –í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${owner}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤—ã
    try {
      const [reserveA, reserveB] = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
      console.log(`üí∞ –¢–µ–∫—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤—ã: ${ethers.utils.formatUnits(reserveA, 6)} USDT, ${ethers.utils.formatUnits(reserveB, 18)} BTC`);
      
      if (reserveA.gt(0) && reserveB.gt(0)) {
        console.log('‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —É–∂–µ –µ—Å—Ç—å!');
        return;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ü–∞—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–æ–≤');
    }
    
    console.log('\nüí° –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –ù—É–∂–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
    console.log('2. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é');
    console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥');
    
    console.log('\nüöÄ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
    console.log('1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é');
    console.log('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DEX (Uniswap)');
    console.log('3. –°–æ–∑–¥–∞—Ç—å mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

addLiquidityToContract();
