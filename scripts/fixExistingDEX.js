// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û DEX
const { ethers } = require('ethers');

async function fixExistingDEX() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û DEX');
  console.log('='.repeat(50));
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
  const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia...');
  console.log('üë§ –ê–¥—Ä–µ—Å:', wallet.address);
  
  // –ê–¥—Ä–µ—Å–∞
  const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
  const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  
  // ABI –¥–ª—è DEX
  const DEX_ABI = [
    "function createPair(address tokenA, address tokenB, uint256 initialAmountA, uint256 initialAmountB) external",
    "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
    "function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external",
    "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
    "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)",
    "function getTokenBalance(address token) external view returns (uint256)",
    "function owner() external view returns (address)"
  ];
  
  const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, wallet);
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ DEX...');
    const owner = await dexContract.owner();
    console.log('üëë –í–ª–∞–¥–µ–ª–µ—Ü DEX:', owner);
    console.log('üë§ –ù–∞—à –∞–¥—Ä–µ—Å:', wallet.address);
    
    if (owner.toLowerCase() !== wallet.address.toLowerCase()) {
      console.log('‚ùå –ú—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü DEX! –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä.');
      return;
    }
    
    console.log('‚úÖ –ú—ã –≤–ª–∞–¥–µ–ª–µ—Ü DEX! –ú–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—ã.');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤...');
    const usdtBalance = await dexContract.getTokenBalance(USDT_ADDRESS);
    const btcBalance = await dexContract.getTokenBalance(BTC_ADDRESS);
    const ethBalance = await dexContract.getTokenBalance(ETH_ADDRESS);
    
    console.log('üíµ USDT –≤ DEX:', ethers.utils.formatUnits(usdtBalance, 6));
    console.log('‚Çø BTC –≤ DEX:', ethers.utils.formatUnits(btcBalance, 8));
    console.log('Œû ETH –≤ DEX:', ethers.utils.formatUnits(ethBalance, 18));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã...');
    const usdtBtcReserves = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
    const usdtEthReserves = await dexContract.getReserves(USDT_ADDRESS, ETH_ADDRESS);
    
    console.log('üíµ/‚Çø USDT/BTC —Ä–µ–∑–µ—Ä–≤—ã:', ethers.utils.formatUnits(usdtBtcReserves[0], 6), '/', ethers.utils.formatUnits(usdtBtcReserves[1], 8));
    console.log('üíµ/Œû USDT/ETH —Ä–µ–∑–µ—Ä–≤—ã:', ethers.utils.formatUnits(usdtEthReserves[0], 6), '/', ethers.utils.formatUnits(usdtEthReserves[1], 18));
    
    if (usdtBtcReserves[0].eq(0) && usdtBtcReserves[1].eq(0)) {
      console.log('\nüìä –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/BTC...');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏
      const initialUSDT = ethers.utils.parseUnits('1000', 6); // 1000 USDT
      const initialBTC = ethers.utils.parseUnits('0.01', 8);    // 0.01 BTC
      
      console.log('üíµ –ù–∞—á–∞–ª—å–Ω–∞—è USDT:', ethers.utils.formatUnits(initialUSDT, 6));
      console.log('‚Çø –ù–∞—á–∞–ª—å–Ω–∞—è BTC:', ethers.utils.formatUnits(initialBTC, 8));
      
      const createPairTx = await dexContract.createPair(
        USDT_ADDRESS,
        BTC_ADDRESS,
        initialUSDT,
        initialBTC
      );
      
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
      await createPairTx.wait();
      
      console.log('‚úÖ –ü–∞—Ä–∞ USDT/BTC —Å–æ–∑–¥–∞–Ω–∞!');
      console.log('üîó TX Hash:', createPairTx.hash);
    } else {
      console.log('‚úÖ –ü–∞—Ä–∞ USDT/BTC —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    
    if (usdtEthReserves[0].eq(0) && usdtEthReserves[1].eq(0)) {
      console.log('\nüìä –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É USDT/ETH...');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏
      const initialUSDT = ethers.utils.parseUnits('1000', 6); // 1000 USDT
      const initialETH = ethers.utils.parseUnits('0.3', 18);  // 0.3 ETH
      
      console.log('üíµ –ù–∞—á–∞–ª—å–Ω–∞—è USDT:', ethers.utils.formatUnits(initialUSDT, 6));
      console.log('Œû –ù–∞—á–∞–ª—å–Ω–∞—è ETH:', ethers.utils.formatUnits(initialETH, 18));
      
      const createPairTx = await dexContract.createPair(
        USDT_ADDRESS,
        ETH_ADDRESS,
        initialUSDT,
        initialETH
      );
      
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
      await createPairTx.wait();
      
      console.log('‚úÖ –ü–∞—Ä–∞ USDT/ETH —Å–æ–∑–¥–∞–Ω–∞!');
      console.log('üîó TX Hash:', createPairTx.hash);
    } else {
      console.log('‚úÖ –ü–∞—Ä–∞ USDT/ETH —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    }
    
    console.log('\nüéØ DEX –ò–°–ü–†–ê–í–õ–ï–ù!');
    console.log('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    console.log('‚úÖ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DEX:', error.message);
    
    if (error.message.includes('execution reverted')) {
      console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
      console.log('1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä');
      console.log('2. –¢–æ–∫–µ–Ω—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è DEX');
      console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º DEX');
    }
  }
}

fixExistingDEX();