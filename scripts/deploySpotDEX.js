// –î–ï–ü–õ–û–ô –°–ü–û–¢–û–í–û–ô –ë–ò–†–ñ–ò
const { ethers } = require('ethers');

async function deploySpotDEX() {
  console.log('üöÄ –î–ï–ü–õ–û–ô –°–ü–û–¢–û–í–û–ô –ë–ò–†–ñ–ò');
  console.log('='.repeat(50));
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
  const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Sepolia...');
  console.log('üë§ –ê–¥—Ä–µ—Å:', wallet.address);
  
  // ABI –¥–ª—è SpotDEX
  const SpotDEX_ABI = [
    "constructor()",
    "function createPair(address tokenA, address tokenB, uint256 initialAmountA, uint256 initialAmountB) external",
    "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
    "function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external",
    "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
    "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)",
    "function getTokenBalance(address token) external view returns (uint256)",
    "function owner() external view returns (address)"
  ];
  
  // –ß–∏—Ç–∞–µ–º bytecode –∏–∑ —Ñ–∞–π–ª–∞
  const fs = require('fs');
  const path = require('path');
  const bytecodePath = path.join(__dirname, '../build/SpotDEX.bin.txt');
  const SpotDEX_Bytecode = fs.readFileSync(bytecodePath, 'utf8').trim();
  
  try {
    console.log('üì¶ –î–µ–ø–ª–æ–π SpotDEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...');
    const factory = new ethers.ContractFactory(SpotDEX_ABI, SpotDEX_Bytecode, wallet);
    const contract = await factory.deploy();
    await contract.deployed();
    
    console.log('‚úÖ SpotDEX —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!');
    console.log('üìç –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contract.address);
    console.log('üîó TX Hash:', contract.deployTransaction.hash);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const owner = await contract.owner();
    console.log('üëë –í–ª–∞–¥–µ–ª–µ—Ü:', owner);
    
    console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ userTradingService.ts');
    console.log('2. –°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã');
    console.log('3. –î–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
  }
}

deploySpotDEX();
