const { ethers } = require('ethers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RPC_URL = 'https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9';
const provider = new ethers.providers.JsonRpcProvider(RPC_URL, {
  name: 'sepolia',
  chainId: 11155111
});

// –í–ê–® –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!)
const YOUR_PRIVATE_KEY = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';

// –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
const TOKENS = {
  USDT: '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6',
  BTC: '0xC941593909348e941420D5404Ab00b5363b1dDB4',
  ETH: '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb'
};

// –ö–æ—à–µ–ª—å–∫–∏ –±–æ—Ç–æ–≤
const BOT_WALLETS = [
  {
    name: 'AlphaTrader',
    address: '0x482F4D85145f8A5494583e24efE2944C643825f6'
  },
  {
    name: 'BetaBot', 
    address: '0x78ACAcBf97666719345Ea5aCcb302C6F2283a76E'
  },
  {
    name: 'GammaGains',
    address: '0x2bdE3eB40333319f53924A27C95d94122F1b9F52'
  },
  {
    name: 'DeltaDex',
    address: '0x4567890123456789012345678901234567890123'
  }
];

// ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
const ERC20_ABI = [
  "function transfer(address to, uint256 amount) returns (bool)",
  "function balanceOf(address owner) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
async function transferTokens(tokenAddress, toAddress, amount, tokenSymbol, fromWallet) {
  try {
    const tokenContract = new ethers.Contract(tokenAddress, ERC20_ABI, fromWallet);
    
    // –ü–æ–ª—É—á–∞–µ–º decimals
    const decimals = await tokenContract.decimals();
    const amountWei = ethers.utils.parseUnits(amount.toString(), decimals);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await tokenContract.balanceOf(fromWallet.address);
    if (balance.lt(amountWei)) {
      console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol}. –ë–∞–ª–∞–Ω—Å: ${ethers.utils.formatUnits(balance, decimals)}`);
      return false;
    }
    
    console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥ ${amount} ${tokenSymbol} –Ω–∞ ${toAddress}...`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const tx = await tokenContract.transfer(toAddress, amountWei, {
      gasLimit: 150000
    });
    
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... TX: ${tx.hash}`);
    const receipt = await tx.wait();
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount} ${tokenSymbol} (Gas: ${receipt.gasUsed})`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ${tokenSymbol}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function transferTokensToBots() {
  console.log('üí∞ –†–ï–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î –¢–û–ö–ï–ù–û–í –ë–û–¢–ê–ú');
  console.log('='.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
  if (YOUR_PRIVATE_KEY === 'YOUR_PRIVATE_KEY_HERE') {
    console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!');
    console.log('üîë –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –≤ MetaMask:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ MetaMask');
    console.log('   2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 3 —Ç–æ—á–∫–∏ ‚Üí Account Details');
    console.log('   3. Export Private Key');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º!');
    return;
  }
  
  try {
    const fromWallet = new ethers.Wallet(YOUR_PRIVATE_KEY, provider);
    console.log(`üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${fromWallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å ETH –¥–ª—è –≥–∞–∑–∞
    const ethBalance = await provider.getBalance(fromWallet.address);
    console.log(`‚õΩ ETH –¥–ª—è –≥–∞–∑–∞: ${ethers.utils.formatEther(ethBalance)} ETH`);
    
    if (ethBalance.lt(ethers.utils.parseEther('0.01'))) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –≥–∞–∑–∞! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 0.01 ETH');
      return;
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    const amounts = {
      USDT: 1000000,  // 1,000,000 USDT –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
      BTC: 1000,      // 1,000 BTC –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É  
      ETH: 100000     // 100,000 ETH —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
    };
    
    console.log('\nüìä –ü–õ–ê–ù –ü–ï–†–ï–í–û–î–ê:');
    console.log('-'.repeat(30));
    console.log(`üí∞ USDT: ${amounts.USDT.toLocaleString()} –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É`);
    console.log(`üí∞ BTC: ${amounts.BTC.toLocaleString()} –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É`);
    console.log(`üí∞ ETH: ${amounts.ETH.toLocaleString()} –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É`);
    console.log(`ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤: ${BOT_WALLETS.length}`);
    
    let totalTransfers = 0;
    let successfulTransfers = 0;
    
    for (const bot of BOT_WALLETS) {
      console.log(`\nü§ñ ${bot.name}: ${bot.address}`);
      console.log('-'.repeat(30));
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
      for (const [symbol, address] of Object.entries(TOKENS)) {
        totalTransfers++;
        const success = await transferTokens(
          address, 
          bot.address, 
          amounts[symbol], 
          symbol,
          fromWallet
        );
        
        if (success) {
          successfulTransfers++;
          console.log(`‚úÖ ${symbol}: ${amounts[symbol].toLocaleString()} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ`);
        } else {
          console.log(`‚ùå ${symbol}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–ò –ü–ï–†–ï–í–û–î–ê:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${successfulTransfers}/${totalTransfers}`);
    console.log(`üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: $${(amounts.USDT + amounts.BTC * 110000 + amounts.ETH * 3000).toLocaleString()}`);
    
    if (successfulTransfers === totalTransfers) {
      console.log('üéâ –í–°–ï –ü–ï–†–ï–í–û–î–´ –£–°–ü–ï–®–ù–´! –ë–æ—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

transferTokensToBots().catch(console.error);
