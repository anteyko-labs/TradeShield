// –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´
const { ethers } = require('ethers');

async function testSystem() {
  console.log('üîß –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = '22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba';
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // –ê–¥—Ä–µ—Å–∞
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    console.log(`üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function symbol() view returns (string)"
    ];
    
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, provider);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, provider);
    const ethContract = new ethers.Contract(ETH_ADDRESS, TOKEN_ABI, provider);
    
    console.log('\nüìä –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–õ–ê–ù–°–´:');
    
    // USDT
    const usdtBalance = await usdtContract.balanceOf(wallet.address);
    const usdtDecimals = await usdtContract.decimals();
    const usdtSymbol = await usdtContract.symbol();
    const usdtFormatted = ethers.utils.formatUnits(usdtBalance, usdtDecimals);
    console.log(`üí∞ ${usdtSymbol}: ${usdtFormatted} (decimals: ${usdtDecimals})`);
    
    // BTC
    const btcBalance = await btcContract.balanceOf(wallet.address);
    const btcDecimals = await btcContract.decimals();
    const btcSymbol = await btcContract.symbol();
    const btcFormatted = ethers.utils.formatUnits(btcBalance, btcDecimals);
    console.log(`üí∞ ${btcSymbol}: ${btcFormatted} (decimals: ${btcDecimals})`);
    
    // ETH
    const ethBalance = await ethContract.balanceOf(wallet.address);
    const ethDecimals = await ethContract.decimals();
    const ethSymbol = await ethContract.symbol();
    const ethFormatted = ethers.utils.formatUnits(ethBalance, ethDecimals);
    console.log(`üí∞ ${ethSymbol}: ${ethFormatted} (decimals: ${ethDecimals})`);
    
    console.log('\nüí° –ü–†–û–í–ï–†–ö–ê:');
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞');
    console.log('‚úÖ userTradingService –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫');
    
    console.log('\nüöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5173');
    console.log('2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
    console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å BTC');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

testSystem();
