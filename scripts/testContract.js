// –¢–ï–°–¢ –ö–û–ù–¢–†–ê–ö–¢–ê DEX
const { ethers } = require('ethers');

async function testContract() {
  console.log('üîß –¢–ï–°–¢ –ö–û–ù–¢–†–ê–ö–¢–ê DEX');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    
    // ABI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const DEX_ABI = [
      "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
      "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)"
    ];
    
    const USDT_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ];
    
    const BTC_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ];
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, provider);
    const usdtContract = new ethers.Contract(USDT_ADDRESS, USDT_ABI, provider);
    const btcContract = new ethers.Contract(BTC_ADDRESS, BTC_ABI, provider);
    
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–†–ê–ö–¢–ê:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    const usdtBalance = await usdtContract.balanceOf(DEX_ADDRESS);
    const btcBalance = await btcContract.balanceOf(DEX_ADDRESS);
    
    console.log(`üí∞ USDT –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${ethers.utils.formatUnits(usdtBalance, 6)}`);
    console.log(`üí∞ BTC –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: ${ethers.utils.formatUnits(btcBalance, 18)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    if (usdtBalance.gt(0) && btcBalance.gt(0)) {
      console.log('‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –µ—Å—Ç—å!');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º getAmountOut
      const amountIn = ethers.utils.parseUnits('1000', 6); // 1000 USDT
      try {
        const amountOut = await dexContract.getAmountOut(USDT_ADDRESS, BTC_ADDRESS, amountIn);
        console.log(`üìà 1000 USDT = ${ethers.utils.formatUnits(amountOut, 18)} BTC`);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ getAmountOut:', error.message);
      }
    } else {
      console.log('‚ùå –ù–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ!');
      console.log('üí° –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', error.message);
  }
  
  console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

testContract();
