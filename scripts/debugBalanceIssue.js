// –î–ï–ë–ê–ì –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–ê–ú–ò
const { ethers } = require('ethers');

async function debugBalanceIssue() {
  console.log('üîß –î–ï–ë–ê–ì –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–õ–ê–ù–°–ê–ú–ò');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –ê–¥—Ä–µ—Å–∞
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)",
      "function symbol() view returns (string)"
    ];
    
    // –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAddress = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
    
    console.log(`üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–ª—è: ${userAddress}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, provider);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, provider);
    const ethContract = new ethers.Contract(ETH_ADDRESS, TOKEN_ABI, provider);
    
    console.log('\nüìä –†–ï–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´ –í –ë–õ–û–ö–ß–ï–ô–ù–ï:');
    
    // USDT
    const usdtBalance = await usdtContract.balanceOf(userAddress);
    const usdtDecimals = await usdtContract.decimals();
    const usdtSymbol = await usdtContract.symbol();
    const usdtFormatted = ethers.utils.formatUnits(usdtBalance, usdtDecimals);
    console.log(`üí∞ ${usdtSymbol}: ${usdtFormatted} (decimals: ${usdtDecimals})`);
    
    // BTC
    const btcBalance = await btcContract.balanceOf(userAddress);
    const btcDecimals = await btcContract.decimals();
    const btcSymbol = await btcContract.symbol();
    const btcFormatted = ethers.utils.formatUnits(btcBalance, btcDecimals);
    console.log(`üí∞ ${btcSymbol}: ${btcFormatted} (decimals: ${btcDecimals})`);
    
    // ETH
    const ethBalance = await ethContract.balanceOf(userAddress);
    const ethDecimals = await ethContract.decimals();
    const ethSymbol = await ethContract.symbol();
    const ethFormatted = ethers.utils.formatUnits(ethBalance, ethDecimals);
    console.log(`üí∞ ${ethSymbol}: ${ethFormatted} (decimals: ${ethDecimals})`);
    
    console.log('\nüí° –ü–†–û–ë–õ–ï–ú–´:');
    console.log('‚ùå userBalanceService.addBTCTokensToUser() –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç—å!');
    console.log('‚ùå –≠—Ç–æ –ù–ï —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!');
    console.log('‚ùå –ü–æ—ç—Ç–æ–º—É "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC" –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤!');
    
    console.log('\nüîß –†–ï–®–ï–ù–ò–ï:');
    console.log('1. –ù—É–∂–Ω–æ –¥–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ï —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    console.log('2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏');
    console.log('3. –ò–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\n‚úÖ –î–ï–ë–ê–ì –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

debugBalanceIssue();
