// –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –õ–ò–ö–í–ò–î–ù–û–°–¢–ò –í DEX
const { ethers } = require('ethers');

async function addLiquidityReal() {
  console.log('üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô –õ–ò–ö–í–ò–î–ù–û–°–¢–ò –í DEX');
  console.log('='.repeat(60));

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
    
    // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!
    const privateKey = 'YOUR_PRIVATE_KEY_HERE'; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô!
    
    if (privateKey === 'YOUR_PRIVATE_KEY_HERE') {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ privateKey –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!');
      console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ MetaMask');
      console.log('2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ ‚Üí Account Details ‚Üí Export Private Key');
      console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
      console.log('4. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ –≤–∞—à –∫–ª—é—á');
      return;
    }
    
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // –ê–¥—Ä–µ—Å–∞
    const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
    const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
    const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
    
    // ABI –¥–ª—è DEX
    const DEX_ABI = [
      "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
      "function createPair(address tokenA, address tokenB) external",
      "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)"
    ];
    
    // ABI –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    const TOKEN_ABI = [
      "function balanceOf(address owner) view returns (uint256)",
      "function approve(address spender, uint256 amount) returns (bool)",
      "function transfer(address to, uint256 amount) returns (bool)"
    ];
    
    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—à–µ–ª–µ–∫: ${wallet.address}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    const usdtContract = new ethers.Contract(USDT_ADDRESS, TOKEN_ABI, wallet);
    const btcContract = new ethers.Contract(BTC_ADDRESS, TOKEN_ABI, wallet);
    
    const usdtBalance = await usdtContract.balanceOf(wallet.address);
    const btcBalance = await btcContract.balanceOf(wallet.address);
    
    console.log(`üí∞ USDT –±–∞–ª–∞–Ω—Å: ${ethers.utils.formatUnits(usdtBalance, 6)}`);
    console.log(`üí∞ BTC –±–∞–ª–∞–Ω—Å: ${ethers.utils.formatUnits(btcBalance, 18)}`);
    
    if (usdtBalance.gt(0) && btcBalance.gt(0)) {
      console.log('‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!');
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç DEX
      const dexContract = new ethers.Contract(DEX_ADDRESS, DEX_ABI, wallet);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
      const usdtAmount = usdtBalance.div(10); // 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
      const btcAmount = btcBalance.div(10);   // 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
      
      console.log(`\nüîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:`);
      console.log(`üìà USDT: ${ethers.utils.formatUnits(usdtAmount, 6)}`);
      console.log(`üìà BTC: ${ethers.utils.formatUnits(btcAmount, 18)}`);
      
      // –û–¥–æ–±—Ä—è–µ–º —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤
      console.log('‚è≥ –û–¥–æ–±—Ä–µ–Ω–∏–µ USDT...');
      const usdtApproveTx = await usdtContract.approve(DEX_ADDRESS, usdtAmount);
      await usdtApproveTx.wait();
      
      console.log('‚è≥ –û–¥–æ–±—Ä–µ–Ω–∏–µ BTC...');
      const btcApproveTx = await btcContract.approve(DEX_ADDRESS, btcAmount);
      await btcApproveTx.wait();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
      console.log('‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...');
      const addLiquidityTx = await dexContract.addLiquidity(
        USDT_ADDRESS,
        BTC_ADDRESS,
        usdtAmount,
        btcAmount,
        { gasLimit: 500000 }
      );
      
      const receipt = await addLiquidityTx.wait();
      console.log(`‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! TX: ${addLiquidityTx.hash}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤—ã
      const [reserveA, reserveB] = await dexContract.getReserves(USDT_ADDRESS, BTC_ADDRESS);
      console.log(`üìä –ù–æ–≤—ã–µ —Ä–µ–∑–µ—Ä–≤—ã: ${ethers.utils.formatUnits(reserveA, 6)} USDT, ${ethers.utils.formatUnits(reserveB, 18)} BTC`);
      
    } else {
      console.log('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!');
      console.log('üí° –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å USDT –∏ BTC —Ç–æ–∫–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error.message);
  }
  
  console.log('\n‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù');
  console.log('='.repeat(60));
}

addLiquidityReal();
