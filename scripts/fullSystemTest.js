const { ethers } = require('ethers');

// –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–ô –°–ò–°–¢–ï–ú–´
async function fullSystemTest() {
  console.log('üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´');
  console.log('='.repeat(80));
  
  const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  
  // –†–ï–ê–õ–¨–ù–´–ï –∞–¥—Ä–µ—Å–∞
  const USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  const BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  const ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  const DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E';
  const FEE_WALLET = '0xB468B3837e185B59594A100c1583a98C79b524F3';
  
  const userAddress = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
  
  console.log('\nüìä –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –ë–ê–õ–ê–ù–°–û–í');
  console.log('-'.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userUSDT = await getTokenBalance(userAddress, USDT_ADDRESS, 6, provider);
  const userBTC = await getTokenBalance(userAddress, BTC_ADDRESS, 18, provider);
  const userETH = await getTokenBalance(userAddress, ETH_ADDRESS, 18, provider);
  
  console.log(`üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ${userAddress}:`);
  console.log(`   USDT: ${userUSDT}`);
  console.log(`   BTC: ${userBTC}`);
  console.log(`   ETH: ${userETH}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –±–æ—Ç–æ–≤
  const botAddresses = [
    '0x482F4D85145f8A5494583e24efE2944C643825f6', // AlphaTrader
    '0x78ACAcBf97666719345Ea5aCcb302C6F2283a76E', // BetaBot
    '0x2bdE3eB40333319f53924A27C95d94122F1b9F52', // GammaGains
    '0x4567890123456789012345678901234567890123'  // DeltaDex
  ];
  
  console.log(`\nü§ñ –ë–û–¢–´:`);
  for (const botAddr of botAddresses) {
    const botUSDT = await getTokenBalance(botAddr, USDT_ADDRESS, 6, provider);
    const botBTC = await getTokenBalance(botAddr, BTC_ADDRESS, 18, provider);
    const botETH = await getTokenBalance(botAddr, ETH_ADDRESS, 18, provider);
    console.log(`   ${botAddr}: USDT=${botUSDT}, BTC=${botBTC}, ETH=${botETH}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∏—Å—Å–∏–π
  console.log(`\nüí∞ –ö–û–®–ï–õ–ï–ö –ö–û–ú–ò–°–°–ò–ô ${FEE_WALLET}:`);
  const feeUSDT = await getTokenBalance(FEE_WALLET, USDT_ADDRESS, 6, provider);
  const feeBTC = await getTokenBalance(FEE_WALLET, BTC_ADDRESS, 18, provider);
  const feeETH = await getTokenBalance(FEE_WALLET, ETH_ADDRESS, 18, provider);
  console.log(`   USDT: ${feeUSDT}`);
  console.log(`   BTC: ${feeBTC}`);
  console.log(`   ETH: ${feeETH}`);
  
  console.log('\nüìä –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –õ–ò–ú–ò–¢–ù–´–• –û–†–î–ï–†–û–í');
  console.log('-'.repeat(60));
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏
  class TestOrderSystem {
    constructor() {
      this.frozenBalances = [];
      this.userBalances = {
        [userAddress]: {
          USDT: parseFloat(userUSDT),
          BTC: parseFloat(userBTC),
          ETH: parseFloat(userETH)
        }
      };
      this.orders = { bids: [], asks: [] };
    }
    
    getAvailableBalance(userId, token) {
      const total = this.userBalances[userId]?.[token] || 0;
      const frozen = this.frozenBalances
        .filter(fb => fb.userId === userId && fb.token === token)
        .reduce((sum, fb) => sum + fb.amount, 0);
      return Math.max(0, total - frozen);
    }
    
    freezeTokens(userId, token, amount, orderId) {
      const available = this.getAvailableBalance(userId, token);
      if (available < amount) {
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${token}. –î–æ—Å—Ç—É–ø–Ω–æ: ${available}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`);
        return false;
      }
      
      this.frozenBalances.push({ userId, token, amount, orderId, timestamp: Date.now() });
      console.log(`üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ ${amount} ${token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      return true;
    }
    
    createLimitOrder(userId, side, token, amount, price) {
      const orderId = `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      if (side === 'sell') {
        if (!this.freezeTokens(userId, token, amount, orderId)) {
          return null;
        }
      }
      
      const order = {
        id: orderId,
        userId,
        side,
        token,
        amount,
        price,
        total: amount * price,
        timestamp: Date.now(),
        isActive: true
      };
      
      if (side === 'buy') {
        this.orders.bids.push(order);
        this.orders.bids.sort((a, b) => b.price - a.price);
      } else {
        this.orders.asks.push(order);
        this.orders.asks.sort((a, b) => a.price - b.price);
      }
      
      console.log(`üìù –°–æ–∑–¥–∞–Ω ${side} –æ—Ä–¥–µ—Ä: ${amount} ${token} @ $${price}`);
      return order;
    }
    
    getOrderBook() {
      return {
        bids: this.orders.bids.slice(0, 9),
        asks: this.orders.asks.slice(0, 9)
      };
    }
  }
  
  const orderSystem = new TestOrderSystem();
  
  console.log('\nüõí –¢–ï–°–¢ 2.1: –°–û–ó–î–ê–ù–ò–ï –õ–ò–ú–ò–¢–ù–û–ì–û BUY –û–†–î–ï–†–ê');
  console.log('-'.repeat(40));
  
  const buyOrder1 = orderSystem.createLimitOrder(userAddress, 'buy', 'BTC', 0.5, 64000);
  const buyOrder2 = orderSystem.createLimitOrder(userAddress, 'buy', 'BTC', 1.0, 63500);
  const buyOrder3 = orderSystem.createLimitOrder(userAddress, 'buy', 'BTC', 0.3, 64500);
  
  console.log('\nüõí –¢–ï–°–¢ 2.2: –°–û–ó–î–ê–ù–ò–ï –õ–ò–ú–ò–¢–ù–û–ì–û SELL –û–†–î–ï–†–ê');
  console.log('-'.repeat(40));
  
  const sellOrder1 = orderSystem.createLimitOrder(userAddress, 'sell', 'BTC', 1.0, 66000);
  const sellOrder2 = orderSystem.createLimitOrder(userAddress, 'sell', 'BTC', 0.5, 66500);
  const sellOrder3 = orderSystem.createLimitOrder(userAddress, 'sell', 'BTC', 2.0, 67000);
  
  console.log('\nüìä –¢–ï–°–¢ 3: –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–û–í –ë–û–¢–ê–ú–ò');
  console.log('-'.repeat(60));
  
  // –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –æ—Ä–¥–µ—Ä–∞
  const botNames = ['AlphaTrader', 'BetaBot', 'GammaGains', 'DeltaDex'];
  
  for (let i = 0; i < botNames.length; i++) {
    const botAddress = botAddresses[i];
    const botName = botNames[i];
    
    console.log(`\nü§ñ ${botName} —Å–æ–∑–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞:`);
    
    // Bot buy order
    const botBuyPrice = 65000 * (0.98 + Math.random() * 0.02);
    const botBuyAmount = Math.random() * 0.5 + 0.1;
    const botBuyOrder = {
      id: `bot_buy_${Date.now()}_${i}`,
      botName,
      side: 'buy',
      token: 'BTC',
      amount: botBuyAmount,
      price: botBuyPrice,
      total: botBuyAmount * botBuyPrice,
      timestamp: Date.now(),
      isActive: true
    };
    orderSystem.orders.bids.push(botBuyOrder);
    console.log(`   üìà Buy: ${botBuyAmount.toFixed(3)} BTC @ $${botBuyPrice.toFixed(2)}`);
    
    // Bot sell order
    const botSellPrice = 65000 * (1.00 + Math.random() * 0.02);
    const botSellAmount = Math.random() * 0.5 + 0.1;
    const botSellOrder = {
      id: `bot_sell_${Date.now()}_${i}`,
      botName,
      side: 'sell',
      token: 'BTC',
      amount: botSellAmount,
      price: botSellPrice,
      total: botSellAmount * botSellPrice,
      timestamp: Date.now(),
      isActive: true
    };
    orderSystem.orders.asks.push(botSellOrder);
    console.log(`   üìâ Sell: ${botSellAmount.toFixed(3)} BTC @ $${botSellPrice.toFixed(2)}`);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞
  orderSystem.orders.bids.sort((a, b) => b.price - a.price);
  orderSystem.orders.asks.sort((a, b) => a.price - b.price);
  
  console.log('\nüìä –¢–ï–°–¢ 4: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–†–î–ï–†–ë–£–ö–ê');
  console.log('-'.repeat(60));
  
  const orderBook = orderSystem.getOrderBook();
  
  console.log('üìà –¢–û–ü BID –û–†–î–ï–†–ê (–ø–æ–∫—É–ø–∫–∞):');
  orderBook.bids.forEach((order, i) => {
    const owner = order.botName || 'User';
    console.log(`   ${i+1}. ${owner}: ${order.amount} BTC @ $${order.price.toLocaleString()}`);
  });
  
  console.log('\nüìâ –¢–û–ü ASK –û–†–î–ï–†–ê (–ø—Ä–æ–¥–∞–∂–∞):');
  orderBook.asks.forEach((order, i) => {
    const owner = order.botName || 'User';
    console.log(`   ${i+1}. ${owner}: ${order.amount} BTC @ $${order.price.toLocaleString()}`);
  });
  
  const bestBid = orderBook.bids[0]?.price || 0;
  const bestAsk = orderBook.asks[0]?.price || 0;
  const spread = bestAsk - bestBid;
  
  console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   –õ—É—á—à–∏–π bid: $${bestBid.toLocaleString()}`);
  console.log(`   –õ—É—á—à–∏–π ask: $${bestAsk.toLocaleString()}`);
  console.log(`   –°–ø—Ä–µ–¥: $${spread.toLocaleString()}`);
  console.log(`   –í—Å–µ–≥–æ bid: ${orderBook.bids.length}`);
  console.log(`   –í—Å–µ–≥–æ ask: ${orderBook.asks.length}`);
  
  console.log('\nüìä –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–û–†–û–ñ–ï–ù–ù–´–• –ë–ê–õ–ê–ù–°–û–í');
  console.log('-'.repeat(60));
  
  const availableBTC = orderSystem.getAvailableBalance(userAddress, 'BTC');
  const availableUSDT = orderSystem.getAvailableBalance(userAddress, 'USDT');
  
  console.log(`üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`);
  console.log(`   BTC: ${availableBTC} (–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${parseFloat(userBTC) - availableBTC})`);
  console.log(`   USDT: ${availableUSDT}`);
  
  console.log('\nüìä –¢–ï–°–¢ 6: –°–ò–ú–£–õ–Ø–¶–ò–Ø MARKET –û–†–î–ï–†–û–í');
  console.log('-'.repeat(60));
  
  console.log('‚ö° Market BUY 0.5 BTC (–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å—Ä–∞–∑—É):');
  console.log('   - –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π ask: $' + bestAsk.toLocaleString());
  console.log('   - –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ');
  console.log('   - Market –æ—Ä–¥–µ—Ä –ù–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ä–¥–µ—Ä–±—É–∫');
  
  console.log('\n‚ö° Market SELL 1.0 BTC (–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Å—Ä–∞–∑—É):');
  console.log('   - –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π bid: $' + bestBid.toLocaleString());
  console.log('   - –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ');
  console.log('   - Market –æ—Ä–¥–µ—Ä –ù–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—Ä–¥–µ—Ä–±—É–∫');
  
  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80));
  console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log('   ‚úÖ –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç —Ç–æ–∫–µ–Ω—ã');
  console.log('   ‚úÖ –ë–æ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –æ—Ä–¥–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏');
  console.log('   ‚úÖ –û—Ä–¥–µ—Ä–±—É–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  console.log('   ‚úÖ Market –æ—Ä–¥–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É');
  console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞
async function getTokenBalance(address, tokenAddress, decimals, provider) {
  try {
    const tokenContract = new ethers.Contract(tokenAddress, [
      "function balanceOf(address owner) view returns (uint256)",
      "function decimals() view returns (uint8)"
    ], provider);

    const balance = await tokenContract.balanceOf(address);
    const tokenDecimals = await tokenContract.decimals();
    return ethers.utils.formatUnits(balance, tokenDecimals);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:`, error.message);
    return '0';
  }
}

fullSystemTest().catch(console.error);
