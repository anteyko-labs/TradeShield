const { ethers } = require('ethers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RPC_URL = 'https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9';
const provider = new ethers.providers.JsonRpcProvider(RPC_URL, {
  name: 'sepolia',
  chainId: 11155111
});

// –í–∞—à –∫–æ—à–µ–ª–µ–∫ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
const YOUR_PRIVATE_KEY = 'YOUR_PRIVATE_KEY_HERE'; // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
const yourWallet = new ethers.Wallet(YOUR_PRIVATE_KEY, provider);

// –ê–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
const TOKENS = {
  USDT: '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6',
  BTC: '0xC941593909348e941420D5404Ab00b5363b1dDB4',
  ETH: '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb'
};

// –ö–æ—à–µ–ª—å–∫–∏ –±–æ—Ç–æ–≤
const BOT_WALLETS = [
  '0x482F4D85145f8A5494583e24efE2944C643825f6', // AlphaTrader
  '0x78ACAcBf97666719345Ea5aCcb302C6F2283a76E', // BetaBot
  '0x2bdE3eB40333319f53924A27C95d94122F1b9F52', // GammaGains
  '0x4567890123456789012345678901234567890123'  // DeltaDex
];

// ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–æ–≤
const ERC20_ABI = [
  "function transfer(address to, uint256 amount) returns (bool)",
  "function balanceOf(address owner) view returns (uint256)",
  "function decimals() view returns (uint8)"
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
async function transferTokens(tokenAddress, toAddress, amount, tokenSymbol) {
  try {
    const tokenContract = new ethers.Contract(tokenAddress, ERC20_ABI, yourWallet);
    
    // –ü–æ–ª—É—á–∞–µ–º decimals
    const decimals = await tokenContract.decimals();
    const amountWei = ethers.utils.parseUnits(amount.toString(), decimals);
    
    console.log(`üîÑ –ü–µ—Ä–µ–≤–æ–¥ ${amount} ${tokenSymbol} –Ω–∞ ${toAddress}...`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const tx = await tokenContract.transfer(toAddress, amountWei, {
      gasLimit: 100000
    });
    
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... TX: ${tx.hash}`);
    await tx.wait();
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${amount} ${tokenSymbol}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ${tokenSymbol}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function transferTokensToBots() {
  console.log('üîÑ –ü–ï–†–ï–í–û–î –¢–û–ö–ï–ù–û–í –ë–û–¢–ê–ú');
  console.log('='.repeat(50));
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
  const amounts = {
    USDT: 100000,  // 100,000 USDT –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
    BTC: 1000,     // 1,000 BTC –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
    ETH: 10000     // 10,000 ETH —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥–æ–º—É –±–æ—Ç—É
  };
  
  for (const botAddress of BOT_WALLETS) {
    console.log(`\nü§ñ –ë–æ—Ç: ${botAddress}`);
    console.log('-'.repeat(30));
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    for (const [symbol, address] of Object.entries(TOKENS)) {
      const success = await transferTokens(
        address, 
        botAddress, 
        amounts[symbol], 
        symbol
      );
      
      if (success) {
        console.log(`‚úÖ ${symbol}: ${amounts[symbol]} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ùå ${symbol}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞`);
      }
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('‚úÖ –ü–ï–†–ï–í–û–î –ó–ê–í–ï–†–®–ï–ù');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
if (YOUR_PRIVATE_KEY === 'YOUR_PRIVATE_KEY_HERE') {
  console.log('‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!');
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º!');
} else {
  transferTokensToBots().catch(console.error);
}
