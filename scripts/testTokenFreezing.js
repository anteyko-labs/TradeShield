// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
function testTokenFreezing() {
  console.log('üîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ú–û–†–û–ó–ö–ò –¢–û–ö–ï–ù–û–í');
  console.log('='.repeat(60));
  
  // –°–∏–º—É–ª—è—Ü–∏—è UserBalanceService
  class TestUserBalanceService {
    constructor() {
      this.frozenBalances = [];
      this.userBalances = {};
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    initialize(userAddress) {
      this.userBalances[userAddress] = {
        'USDT': 997470997,
        'BTC': 20991999,
        'ETH': 119559990
      };
      console.log('üí∞ UserBalanceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏:');
      console.log(`   USDT: ${this.userBalances[userAddress]['USDT']}`);
      console.log(`   BTC: ${this.userBalances[userAddress]['BTC']}`);
      console.log(`   ETH: ${this.userBalances[userAddress]['ETH']}`);
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–æ–±—â–∏–π - –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π)
    getAvailableBalance(userId, token) {
      const totalBalance = this.userBalances[userId]?.[token] || 0;
      const frozenAmount = this.getFrozenAmount(userId, token);
      const available = Math.max(0, totalBalance - frozenAmount);
      
      console.log(`üîç getAvailableBalance: ${token} –¥–ª—è ${userId}`);
      console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBalance}`);
      console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${frozenAmount}`);
      console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${available}`);
      
      return available;
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Å—É–º–º—É
    getFrozenAmount(userId, token) {
      return this.frozenBalances
        .filter(fb => fb.userId === userId && fb.token === token)
        .reduce((sum, fb) => sum + fb.amount, 0);
    }
    
    // –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    freezeTokens(userId, token, amount, orderId) {
      const availableBalance = this.getAvailableBalance(userId, token);
      
      if (availableBalance < amount) {
        console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${token} –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`);
        return false;
      }

      const frozenBalance = {
        userId,
        token,
        amount,
        orderId,
        timestamp: Date.now()
      };

      this.frozenBalances.push(frozenBalance);
      console.log(`üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ ${amount} ${token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance})`);
      return true;
    }
    
    // –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    unfreezeTokens(orderId) {
      const frozenIndex = this.frozenBalances.findIndex(fb => fb.orderId === orderId);
      
      if (frozenIndex === -1) {
        console.error(`‚ùå –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
      }

      const frozen = this.frozenBalances[frozenIndex];
      this.frozenBalances.splice(frozenIndex, 1);
      
      console.log(`üîì –†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ ${frozen.amount} ${frozen.token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
      return true;
    }
  }
  
  console.log('\nüìä –¢–ï–°–¢ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –ë–ê–õ–ê–ù–°–ê–ú–ò');
  console.log('-'.repeat(50));
  
  const userBalanceService = new TestUserBalanceService();
  const userAddress = '0x513756b7ed711c472537cb497833c5d5eb02a3df';
  userBalanceService.initialize(userAddress);
  
  console.log('\nüìä –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–ì–û –ë–ê–õ–ê–ù–°–ê BTC');
  console.log('-'.repeat(50));
  
  const availableBTC = userBalanceService.getAvailableBalance(userAddress, 'BTC');
  console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ BTC: ${availableBTC}`);
  
  console.log('\nüìä –¢–ï–°–¢ 3: –°–û–ó–î–ê–ù–ò–ï –õ–ò–ú–ò–¢–ù–û–ì–û SELL –û–†–î–ï–†–ê –ù–ê 1 BTC');
  console.log('-'.repeat(50));
  
  const orderId = `order_${Date.now()}`;
  const freezeResult = userBalanceService.freezeTokens(userAddress, 'BTC', 1, orderId);
  
  if (freezeResult) {
    console.log('‚úÖ –ó–∞–º–æ—Ä–æ–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏
    const availableAfterFreeze = userBalanceService.getAvailableBalance(userAddress, 'BTC');
    console.log(`üí∞ –î–æ—Å—Ç—É–ø–Ω–æ BTC –ø–æ—Å–ª–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏: ${availableAfterFreeze}`);
    
    console.log('\nüìä –¢–ï–°–¢ 4: –û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê (–†–ê–ó–ú–û–†–û–ó–ö–ê)');
    console.log('-'.repeat(50));
    
    const unfreezeResult = userBalanceService.unfreezeTokens(orderId);
    if (unfreezeResult) {
      const availableAfterUnfreeze = userBalanceService.getAvailableBalance(userAddress, 'BTC');
      console.log(`üí∞ –î–æ—Å—Ç—É–ø–Ω–æ BTC –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏: ${availableAfterUnfreeze}`);
    }
  } else {
    console.log('‚ùå –ó–∞–º–æ—Ä–æ–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!');
  }
  
  console.log('\nüìä –¢–ï–°–¢ 5: –ü–û–ü–´–¢–ö–ê –ó–ê–ú–û–†–û–ó–ò–¢–¨ –ë–û–õ–¨–®–ï –ß–ï–ú –î–û–°–¢–£–ü–ù–û');
  console.log('-'.repeat(50));
  
  const badOrderId = `bad_order_${Date.now()}`;
  const badFreezeResult = userBalanceService.freezeTokens(userAddress, 'BTC', 50000000, badOrderId);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å 50M BTC: ${badFreezeResult ? '–£—Å–ø–µ—Ö' : '–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ)'}`);
  
  console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ú–û–†–û–ó–ö–ò –ó–ê–í–ï–†–®–ï–ù–û');
}

testTokenFreezing();
