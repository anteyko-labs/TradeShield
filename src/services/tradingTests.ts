import { realBotService } from './realBotService';
import { realTradingService } from './realTradingService';

export class TradingTests {
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤
  static async testBotInitialization(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤...');
      
      await realBotService.initialize();
      const bots = realBotService.getBots();
      
      if (bots.length !== 4) {
        console.error('‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 4 –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ:', bots.length);
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –µ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
      for (const bot of bots) {
        if (!bot.address || !bot.privateKey) {
          console.error('‚ùå –£ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
          return false;
        }
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –ë–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–æ—Ç–æ–≤
  static async testBotTrading(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç 2: –¢–æ—Ä–≥–æ–≤–ª—è –±–æ—Ç–æ–≤...');
      
      const initialTrades = realBotService.getTrades().length;
      
      // –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥ (–±–æ—Ç—ã —Ç–æ—Ä–≥—É—é—Ç –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
      await new Promise(resolve => setTimeout(resolve, 6000));
      
      const newTrades = realBotService.getTrades().length;
      
      if (newTrades <= initialTrades) {
        console.error('‚ùå –ù–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å');
        return false;
      }
      
      console.log(`‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –°–æ–∑–¥–∞–Ω–æ ${newTrades - initialTrades} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫`);
      return true;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞
  static testOrderBook(): boolean {
    try {
      console.log('üß™ –¢–µ—Å—Ç 3: –û—Ä–¥–µ—Ä–±—É–∫...');
      
      const orderBook = realBotService.getOrderBook();
      
      if (!orderBook.bids || !orderBook.asks) {
        console.error('‚ùå –û—Ä–¥–µ—Ä–±—É–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return false;
      }
      
      if (orderBook.bids.length === 0 && orderBook.asks.length === 0) {
        console.error('‚ùå –û—Ä–¥–µ—Ä–±—É–∫ –ø—É—Å—Ç–æ–π');
        return false;
      }
      
      console.log(`‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: ${orderBook.bids.length} bids, ${orderBook.asks.length} asks`);
      return true;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  static testStatistics(): boolean {
    try {
      console.log('üß™ –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');
      
      const stats = realBotService.getStats();
      
      if (stats.totalBots !== 4) {
        console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤:', stats.totalBots);
        return false;
      }
      
      if (stats.activeBots !== 4) {
        console.error('‚ùå –ù–µ –≤—Å–µ –±–æ—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã:', stats.activeBots);
        return false;
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
      return true;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
  static async testRealTrading(): Promise<boolean> {
    try {
      console.log('üß™ –¢–µ—Å—Ç 5: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      if (!realTradingService) {
        console.log('‚ö†Ô∏è –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)');
        return true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥–µ–º–æ
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–ø—É—â–µ–Ω: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤');
      return true;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç 5 –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  static async runAllTests(): Promise<{ passed: number; total: number; results: boolean[] }> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    const tests = [
      () => this.testBotInitialization(),
      () => this.testBotTrading(),
      () => this.testOrderBook(),
      () => this.testStatistics(),
      () => this.testRealTrading()
    ];
    
    const results: boolean[] = [];
    
    for (let i = 0; i < tests.length; i++) {
      try {
        const result = await tests[i]();
        results.push(result);
      } catch (error) {
        console.error(`‚ùå –¢–µ—Å—Ç ${i + 1} —É–ø–∞–ª:`, error);
        results.push(false);
      }
    }
    
    const passed = results.filter(r => r).length;
    const total = results.length;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passed}/${total} –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passed === total) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã');
    }
    
    return { passed, total, results };
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if (typeof window !== 'undefined') {
  setTimeout(() => {
    TradingTests.runAllTests();
  }, 2000);
}
