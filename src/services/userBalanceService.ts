import { ethers } from 'ethers';

export interface FrozenBalance {
  userId: string;
  token: string;
  amount: number;
  orderId: string;
  timestamp: number;
}

class UserBalanceService {
  private frozenBalances: FrozenBalance[] = [];
  private userBalances: { [userId: string]: { [token: string]: number } } = {};

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
  async initialize(provider: ethers.providers.Web3Provider, signer: ethers.Signer): Promise<void> {
    const userAddress = await signer.getAddress();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –±–∞–ª–∞–Ω—Å—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    await this.loadUserBalances(userAddress, provider);
    
    console.log('üí∞ UserBalanceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –†–ï–ê–õ–¨–ù–´–ú–ò –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞');
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async loadUserBalances(userAddress: string, provider: ethers.providers.Web3Provider): Promise<void> {
    const tokenAddresses = {
      'USDT': '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6',
      'BTC': '0xC941593909348e941420D5404Ab00b5363b1dDB4',
      'ETH': '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb'
    };

    this.userBalances[userAddress] = {};

    for (const [symbol, address] of Object.entries(tokenAddresses)) {
      try {
        const tokenContract = new ethers.Contract(address, [
          "function balanceOf(address owner) view returns (uint256)",
          "function decimals() view returns (uint8)"
        ], provider);

        const balance = await tokenContract.balanceOf(userAddress);
        const decimals = await tokenContract.decimals();
        const formattedBalance = parseFloat(ethers.utils.formatUnits(balance, decimals));
        
        this.userBalances[userAddress][symbol] = formattedBalance;
        console.log(`üí∞ ${symbol} –±–∞–ª–∞–Ω—Å: ${formattedBalance}`);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ ${symbol}:`, error);
        this.userBalances[userAddress][symbol] = 0;
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–æ–±—â–∏–π - –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π)
  getAvailableBalance(userId: string, token: string): number {
    const totalBalance = this.userBalances[userId]?.[token] || 0;
    const frozenAmount = this.getFrozenAmount(userId, token);
    const available = Math.max(0, totalBalance - frozenAmount);
    
    console.log(`üîç getAvailableBalance: ${token} –¥–ª—è ${userId}`);
    console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBalance}`);
    console.log(`   –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${frozenAmount}`);
    console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${available}`);
    
    return available;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
  getTotalBalance(userId: string, token: string): number {
    return this.userBalances[userId]?.[token] || 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—É—é —Å—É–º–º—É
  getFrozenAmount(userId: string, token: string): number {
    return this.frozenBalances
      .filter(fb => fb.userId === userId && fb.token === token)
      .reduce((sum, fb) => sum + fb.amount, 0);
  }

  // –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
  freezeTokens(userId: string, token: string, amount: number, orderId: string): boolean {
    const availableBalance = this.getAvailableBalance(userId, token);
    
    if (availableBalance < amount) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${token} –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`);
      return false;
    }

    // –í–ê–ñ–ù–û: –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ù–ï –≤–µ—Å—å –±–∞–ª–∞–Ω—Å!
    const frozenBalance: FrozenBalance = {
      userId,
      token,
      amount, // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ amount, –Ω–µ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å!
      orderId,
      timestamp: Date.now()
    };

    this.frozenBalances.push(frozenBalance);
    console.log(`üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ ${amount} ${token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance})`);
    return true;
  }

  // –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞)
  unfreezeTokens(userId: string, token: string, amount: number, orderId: string): boolean {
    const frozenIndex = this.frozenBalances.findIndex(fb => fb.orderId === orderId);
    
    if (frozenIndex === -1) {
      console.error(`‚ùå –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }
    
    const frozen = this.frozenBalances[frozenIndex];
    this.frozenBalances.splice(frozenIndex, 1);
    
    console.log(`üîì –†–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ ${frozen.amount} ${frozen.token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
    return true;
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ)
  addTokens(userId: string, token: string, amount: number): void {
    if (!this.userBalances[userId]) {
      this.userBalances[userId] = {};
    }
    
    if (!this.userBalances[userId][token]) {
      this.userBalances[userId][token] = 0;
    }
    
    this.userBalances[userId][token] += amount;
    console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} ${token} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  }
  
  // –°–ø–∏—Å—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ)
  subtractTokens(userId: string, token: string, amount: number): void {
    if (!this.userBalances[userId] || !this.userBalances[userId][token]) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${token} –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è`);
      return;
    }
    
    if (this.userBalances[userId][token] < amount) {
      console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${token} –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ: ${this.userBalances[userId][token]}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${amount}`);
      return;
    }
    
    this.userBalances[userId][token] -= amount;
    console.log(`‚ûñ –°–ø–∏—Å–∞–Ω–æ ${amount} ${token} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä (—Å–ø–∏—Å–∞—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
  executeOrder(orderId: string): boolean {
    const frozenIndex = this.frozenBalances.findIndex(fb => fb.orderId === orderId);
    
    if (frozenIndex === -1) {
      console.error(`‚ùå –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }

    const frozen = this.frozenBalances[frozenIndex];
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞
    if (this.userBalances[frozen.userId] && this.userBalances[frozen.userId][frozen.token] !== undefined) {
      this.userBalances[frozen.userId][frozen.token] -= frozen.amount;
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É
    this.frozenBalances.splice(frozenIndex, 1);
    
    console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–æ ${frozen.amount} ${frozen.token} –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}`);
    return true;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserFrozenBalances(userId: string): FrozenBalance[] {
    return this.frozenBalances.filter(fb => fb.userId === userId);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
  updateBalance(userId: string, token: string, amount: number): void {
    if (!this.userBalances[userId]) {
      this.userBalances[userId] = {};
    }
    
    if (!this.userBalances[userId][token]) {
      this.userBalances[userId][token] = 0;
    }
    
    this.userBalances[userId][token] += amount;
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å ${userId}: ${amount > 0 ? '+' : ''}${amount} ${token}`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–∞—Ö
  getBalanceInfo(userId: string, token: string) {
    const total = this.getTotalBalance(userId, token);
    const frozen = this.getFrozenAmount(userId, token);
    const available = this.getAvailableBalance(userId, token);
    
    return {
      total,
      frozen,
      available,
      frozenOrders: this.frozenBalances.filter(fb => fb.userId === userId && fb.token === token)
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
  clearOldFrozenBalances(): void {
    const cutoffTime = Date.now() - (7 * 24 * 60 * 60 * 1000);
    const oldCount = this.frozenBalances.length;
    
    this.frozenBalances = this.frozenBalances.filter(fb => fb.timestamp > cutoffTime);
    
    const removedCount = oldCount - this.frozenBalances.length;
    if (removedCount > 0) {
      console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${removedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    const totalFrozen = this.frozenBalances.reduce((sum, fb) => sum + fb.amount, 0);
    const uniqueUsers = new Set(this.frozenBalances.map(fb => fb.userId)).size;
    
    return {
      totalFrozenBalances: this.frozenBalances.length,
      totalFrozenAmount: totalFrozen,
      uniqueUsers,
      tokens: [...new Set(this.frozenBalances.map(fb => fb.token))]
    };
  }

  // –î–æ–±–∞–≤–∏—Ç—å BTC —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  addBTCTokensToUser(userId: string, amount: number = 1): void {
    if (!this.userBalances[userId]) {
      this.userBalances[userId] = {};
    }
    
    if (!this.userBalances[userId]['BTC']) {
      this.userBalances[userId]['BTC'] = 0;
    }
    
    this.userBalances[userId]['BTC'] += amount;
    console.log(`üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} BTC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.userBalances[userId]['BTC']}`);
  }
}

export const userBalanceService = new UserBalanceService();
