import { ethers } from 'ethers';

export interface MatchOrder {
  id: string;
  user: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  minAmountOut: string;
  side: 'buy' | 'sell';
  timestamp: number;
}

export interface BatchTrade {
  id: string;
  orders: MatchOrder[];
  totalFee: string;
  gasEstimate: string;
  status: 'pending' | 'executing' | 'completed' | 'failed';
  txHash?: string;
  timestamp: number;
}

class TradingEngine {
  private provider: ethers.providers.JsonRpcProvider;
  private feeWallet: ethers.Wallet;
  private dexContract?: ethers.Contract;
  
  // –†–ï–ê–õ–¨–ù–´–ï –∞–¥—Ä–µ—Å–∞
  private readonly DEX_ADDRESS = '0x...'; // –ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å SimpleDEX
  private readonly USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  private readonly BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  private readonly ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  
  // –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
  private readonly FEE_WALLET_ADDRESS = '0xB468B3837e185B59594A100c1583a98C79b524F3';
  private readonly FEE_WALLET_PRIVATE_KEY = 'cbd0632c261aa3c4724616833151488df591ee1372c9982cac661ad773d8f42c';
  
  // –û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤
  private orderQueue: MatchOrder[] = [];
  private batchSize = 10; // –°–æ–±–∏—Ä–∞–µ–º 10 –æ—Ä–¥–µ—Ä–æ–≤ –≤ –±–∞—Ç—á
  private batchTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è
  
  // ABI –¥–ª—è DEX –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  private readonly DEX_ABI = [
    "function executeBatch(address[] memory users, address[] memory tokensIn, address[] memory tokensOut, uint256[] memory amountsIn, uint256[] memory minAmountsOut) external returns (bool)",
    "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
    "function collectFees() external",
    "function getFeeBalance() external view returns (uint256)"
  ];

  constructor() {
    this.provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/your-infura-key');
    this.feeWallet = new ethers.Wallet(this.FEE_WALLET_PRIVATE_KEY, this.provider);
  }

  async initialize(dexAddress: string): Promise<void> {
    this.DEX_ADDRESS = dexAddress;
    this.dexContract = new ethers.Contract(this.DEX_ADDRESS, this.DEX_ABI, this.feeWallet);
    console.log('üöÄ TradingEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å DEX:', this.DEX_ADDRESS);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å
  async addOrder(order: MatchOrder): Promise<string> {
    console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä: ${order.side} ${order.amountIn} ${order.tokenIn} -> ${order.tokenOut}`);
    
    this.orderQueue.push(order);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞—Ç—á
    if (this.orderQueue.length >= this.batchSize) {
      await this.executeBatch();
    }
    
    return order.id;
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞—Ç—á –æ—Ä–¥–µ—Ä–æ–≤
  private async executeBatch(): Promise<void> {
    if (this.orderQueue.length === 0) return;
    
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ –∏–∑ ${this.orderQueue.length} –æ—Ä–¥–µ—Ä–æ–≤...`);
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –æ—Ä–¥–µ—Ä–æ–≤
    const batchOrders = this.orderQueue.splice(0, this.batchSize);
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const users = batchOrders.map(order => order.user);
      const tokensIn = batchOrders.map(order => order.tokenIn);
      const tokensOut = batchOrders.map(order => order.tokenOut);
      const amountsIn = batchOrders.map(order => order.amountIn);
      const minAmountsOut = batchOrders.map(order => order.minAmountOut);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –∫–æ–º–∏—Å—Å–∏—é (0.2% —Å –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)
      const totalFee = batchOrders.reduce((sum, order) => {
        const fee = parseFloat(order.amountIn) * 0.002;
        return sum + fee;
      }, 0);
      
      console.log(`üí∞ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞—Ç—á–∞: ${totalFee.toFixed(6)} USDT`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞—Ç—á —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const tx = await this.dexContract.executeBatch(
        users,
        tokensIn,
        tokensOut,
        amountsIn,
        minAmountsOut,
        {
          gasLimit: 500000, // –ë–æ–ª—å—à–µ –≥–∞–∑–∞ –¥–ª—è –±–∞—Ç—á–∞
          gasPrice: await this.getOptimalGasPrice()
        }
      );
      
      console.log(`‚úÖ –ë–∞—Ç—á –≤—ã–ø–æ–ª–Ω–µ–Ω! TX: ${tx.hash}`);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const receipt = await tx.wait();
      console.log(`‚õΩ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≥–∞–∑–∞: ${receipt.gasUsed.toString()}`);
      
      // –ö–æ–º–∏—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ FEE_WALLET
      console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è ${totalFee.toFixed(6)} USDT –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ ${this.FEE_WALLET_ADDRESS}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å
      this.orderQueue.unshift(...batchOrders);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞
  private async getOptimalGasPrice(): Promise<string> {
    try {
      const feeData = await this.provider.getFeeData();
      return feeData.gasPrice?.toString() || '20000000000'; // 20 gwei –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞:', error);
      return '20000000000';
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞—Ç—á–µ–π –ø–æ —Ç–∞–π–º–∞—É—Ç—É
  startBatchProcessor(): void {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞—Ç—á–µ—Ä–∞...');
    
    setInterval(async () => {
      if (this.orderQueue.length > 0) {
        console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –±–∞—Ç—á–∞: ${this.orderQueue.length} –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`);
        await this.executeBatch();
      }
    }, this.batchTimeout);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–º–∏—Å—Å–∏–π
  async getFeeBalance(): Promise<string> {
    if (!this.dexContract) return '0';
    
    try {
      const balance = await this.dexContract.getFeeBalance();
      return ethers.utils.formatEther(balance);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∏—Å—Å–∏–π:', error);
      return '0';
    }
  }

  // –°–æ–±—Ä–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –∫–æ—à–µ–ª–µ–∫
  async collectFees(): Promise<string> {
    if (!this.dexContract) return '';
    
    try {
      console.log('üí∞ –°–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–π...');
      const tx = await this.dexContract.collectFees();
      await tx.wait();
      console.log(`‚úÖ –ö–æ–º–∏—Å—Å–∏–∏ —Å–æ–±—Ä–∞–Ω—ã! TX: ${tx.hash}`);
      return tx.hash;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π:', error);
      return '';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    return {
      ordersInQueue: this.orderQueue.length,
      batchSize: this.batchSize,
      batchTimeout: this.batchTimeout,
      feeWallet: this.FEE_WALLET_ADDRESS
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
  getQueuedOrders(): MatchOrder[] {
    return [...this.orderQueue];
  }
}

export const tradingEngine = new TradingEngine();