import { ethers } from 'ethers';

export interface RealTradeResult {
  success: boolean;
  txHash?: string;
  error?: string;
  gasUsed?: string;
}

export interface RealOrder {
  id: string;
  user: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  minAmountOut: string;
  timestamp: number;
  status: 'pending' | 'filled' | 'cancelled';
}

class RealTradingService {
  private provider: ethers.providers.JsonRpcProvider;
  private signer?: ethers.Signer;
  private dexContract?: ethers.Contract;
  private tokenRegistry?: ethers.Contract;
  
  // –†–ï–ê–õ–¨–ù–´–ï –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  private readonly DEX_ADDRESS = '0x72bfaa294E6443E944ECBdad428224cC050C658E'; // SimpleDEX
  private readonly TOKEN_REGISTRY_ADDRESS = '0xb8b8F8f7Da48b335AF86cf845F5a0506989cc66A'; // TokenRegistry
  
  // –†–ï–ê–õ–¨–ù–´–ï –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
  private readonly USDT_ADDRESS = '0x434897c0Be49cd3f8d9bed1e9C56F8016afd2Ee6';
  private readonly BTC_ADDRESS = '0xC941593909348e941420D5404Ab00b5363b1dDB4';
  private readonly ETH_ADDRESS = '0x13E5f0d98D1dA90931A481fe0CE9eDAb24bA2Ecb';
  
  // –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
  private readonly FEE_WALLET_ADDRESS = '0xB468B3837e185B59594A100c1583a98C79b524F3';
  private readonly FEE_WALLET_PRIVATE_KEY = 'cbd0632c261aa3c4724616833151488df591ee1372c9982cac661ad773d8f42c';
  
  // ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
  private readonly DEX_ABI = [
    "function swap(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut) external returns (bool)",
    "function getAmountOut(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256)",
    "function addLiquidity(address tokenA, address tokenB, uint256 amountA, uint256 amountB) external",
    "function getReserves(address tokenA, address tokenB) external view returns (uint256, uint256)"
  ];
  
  private readonly TOKEN_REGISTRY_ABI = [
    "function getTokenAddress(string memory symbol) external view returns (address)",
    "function registerToken(address tokenAddress, string memory name, string memory symbol) external"
  ];

  constructor() {
    this.provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161');
  }

  async initialize(provider: ethers.providers.Web3Provider, signer: ethers.Signer): Promise<void> {
    this.provider = provider;
    this.signer = signer;
    
    if (this.DEX_ADDRESS && this.DEX_ADDRESS !== '0x...') {
      this.dexContract = new ethers.Contract(this.DEX_ADDRESS, this.DEX_ABI, signer);
    }
    
    if (this.TOKEN_REGISTRY_ADDRESS && this.TOKEN_REGISTRY_ADDRESS !== '0x...') {
      this.tokenRegistry = new ethers.Contract(this.TOKEN_REGISTRY_ADDRESS, this.TOKEN_REGISTRY_ABI, signer);
    }
    
    console.log('üîó RealTradingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –†–ï–ê–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê
  async buyToken(tokenSymbol: string, usdtAmount: string): Promise<RealTradeResult> {
    if (!this.signer || !this.dexContract) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
    }

    try {
      console.log(`üí∞ –ü–æ–∫—É–ø–∫–∞ ${tokenSymbol} –∑–∞ ${usdtAmount} USDT...`);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
      const tokenAddress = await this.getTokenAddress(tokenSymbol);
      if (!tokenAddress) {
        return { success: false, error: `–¢–æ–∫–µ–Ω ${tokenSymbol} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å USDT
      const usdtAddress = await this.getTokenAddress('USDT');
      if (!usdtAddress) {
        return { success: false, error: 'USDT –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const usdtContract = new ethers.Contract(usdtAddress, [
        "function balanceOf(address owner) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)"
      ], this.signer);

      const userAddress = await this.signer.getAddress();
      const usdtBalance = await usdtContract.balanceOf(userAddress);
      const amountIn = ethers.utils.parseUnits(usdtAmount, 6); // USDT –∏–º–µ–µ—Ç 6 decimals

      if (usdtBalance.lt(amountIn)) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT' };
      }

      // 4. –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
      const amountOut = await this.dexContract.getAmountOut(usdtAddress, tokenAddress, amountIn);
      const minAmountOut = amountOut.mul(95).div(100); // 5% slippage

      // 5. –û–¥–æ–±—Ä—è–µ–º —Ç—Ä–∞—Ç—É USDT
      const approveTx = await usdtContract.approve(this.DEX_ADDRESS, amountIn);
      await approveTx.wait();

      // 6. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
      const swapTx = await this.dexContract.swap(
        usdtAddress,
        tokenAddress, 
        amountIn,
        minAmountOut,
        { gasLimit: 300000 }
      );

      const receipt = await swapTx.wait();
      
      console.log(`‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! TX: ${swapTx.hash}`);
      
      return {
        success: true,
        txHash: swapTx.hash,
        gasUsed: receipt.gasUsed.toString()
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –¢–û–ö–ï–ù–ê
  async sellToken(tokenSymbol: string, tokenAmount: string): Promise<RealTradeResult> {
    if (!this.signer || !this.dexContract) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
    }

    try {
      console.log(`üí∏ –ü—Ä–æ–¥–∞–∂–∞ ${tokenAmount} ${tokenSymbol}...`);
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
      const tokenAddress = await this.getTokenAddress(tokenSymbol);
      const usdtAddress = await this.getTokenAddress('USDT');
      
      if (!tokenAddress || !usdtAddress) {
        return { success: false, error: '–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' };
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
      const tokenContract = new ethers.Contract(tokenAddress, [
        "function balanceOf(address owner) view returns (uint256)",
        "function approve(address spender, uint256 amount) returns (bool)"
      ], this.signer);

      const userAddress = await this.signer.getAddress();
      const tokenBalance = await tokenContract.balanceOf(userAddress);
      const amountIn = ethers.utils.parseUnits(tokenAmount, 18); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 18 decimals

      if (tokenBalance.lt(amountIn)) {
        return { success: false, error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol}` };
      }

      // 3. –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT
      const amountOut = await this.dexContract.getAmountOut(tokenAddress, usdtAddress, amountIn);
      const minAmountOut = amountOut.mul(95).div(100); // 5% slippage

      // 4. –û–¥–æ–±—Ä—è–µ–º —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–∞
      const approveTx = await tokenContract.approve(this.DEX_ADDRESS, amountIn);
      await approveTx.wait();

      // 5. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
      const swapTx = await this.dexContract.swap(
        tokenAddress,
        usdtAddress,
        amountIn, 
        minAmountOut,
        { gasLimit: 300000 }
      );

      const receipt = await swapTx.wait();
      
      console.log(`‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞! TX: ${swapTx.hash}`);
      
      return {
        success: true,
        txHash: swapTx.hash,
        gasUsed: receipt.gasUsed.toString()
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
  private async getTokenAddress(symbol: string): Promise<string | null> {
    if (!this.tokenRegistry) return null;
    
    try {
      return await this.tokenRegistry.getTokenAddress(symbol);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ ${symbol}:`, error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
  async getTokenBalance(tokenAddress: string, userAddress: string): Promise<string> {
    try {
      const tokenContract = new ethers.Contract(tokenAddress, [
        "function balanceOf(address owner) view returns (uint256)",
        "function decimals() view returns (uint8)"
      ], this.provider);

      const balance = await tokenContract.balanceOf(userAddress);
      const decimals = await tokenContract.decimals();
      
      return ethers.utils.formatUnits(balance, decimals);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return '0';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
  async getTokenPrice(tokenSymbol: string, usdtAmount: string): Promise<string> {
    if (!this.dexContract) return '0';
    
    try {
      const tokenAddress = await this.getTokenAddress(tokenSymbol);
      const usdtAddress = await this.getTokenAddress('USDT');
      
      if (!tokenAddress || !usdtAddress) return '0';
      
      const amountIn = ethers.utils.parseUnits(usdtAmount, 6);
      const amountOut = await this.dexContract.getAmountOut(usdtAddress, tokenAddress, amountIn);
      
      return ethers.utils.formatUnits(amountOut, 18);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      return '0';
    }
  }
}

export const realTradingService = new RealTradingService();