import tradingDatabase from '../data/tradingDatabase.json';

export interface DatabaseData {
  bots: any[];
  trades: any[];
  orders: {
    bids: any[];
    asks: any[];
  };
  systemStats: {
    totalBots: number;
    activeOrders: number;
    totalFees: number;
    lastUpdate: number | null;
  };
  botBalances: any[];
  tradeLogs: any[];
}

class JsonDatabaseService {
  private data: DatabaseData = tradingDatabase as DatabaseData;

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
  async saveToFile() {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', {
        bots: this.data.bots.length,
        trades: this.data.trades.length,
        orders: this.data.orders.bids.length + this.data.orders.asks.length
      });
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      localStorage.setItem('tradingDatabase', JSON.stringify(this.data));
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
  async loadFromFile() {
    try {
      const saved = localStorage.getItem('tradingDatabase');
      if (saved) {
        this.data = JSON.parse(saved);
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:', {
          bots: this.data.bots.length,
          trades: this.data.trades.length
        });
      }
      return this.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      return this.data;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É
  addTrade(trade: any) {
    this.data.trades.push(trade);
    this.data.tradeLogs.push(trade);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if (this.data.trades.length > 1000) {
      this.data.trades = this.data.trades.slice(-1000);
    }
    if (this.data.tradeLogs.length > 1000) {
      this.data.tradeLogs = this.data.tradeLogs.slice(-1000);
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    this.saveToFile();
  }

  // –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞
  addBot(bot: any) {
    this.data.bots.push(bot);
    this.saveToFile();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä–∞
  updateOrders(orders: any) {
    this.data.orders = orders;
    this.saveToFile();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateStats(stats: any) {
    this.data.systemStats = {
      ...this.data.systemStats,
      ...stats,
      lastUpdate: Date.now()
    };
    this.saveToFile();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  getAllData() {
    return this.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏
  getTradeLogs() {
    return this.data.tradeLogs || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–æ–≤
  getBots() {
    return this.data.bots || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞
  getOrders() {
    return this.data.orders || { bids: [], asks: [] };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    return this.data.systemStats || {
      totalBots: 0,
      activeOrders: 0,
      totalFees: 0,
      lastUpdate: null
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  clearAll() {
    this.data = {
      bots: [],
      trades: [],
      orders: { bids: [], asks: [] },
      systemStats: {
        totalBots: 0,
        activeOrders: 0,
        totalFees: 0,
        lastUpdate: null
      },
      botBalances: [],
      tradeLogs: []
    };
    this.saveToFile();
  }
}

export const jsonDatabaseService = new JsonDatabaseService();
