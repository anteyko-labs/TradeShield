import { ethers } from 'ethers';

export interface UserTradeResult {
  success: boolean;
  txHash?: string;
  error?: string;
  gasUsed?: string;
}

class UserTradingService {
  private provider: ethers.providers.JsonRpcProvider;
  private signer?: ethers.Signer;
  
  constructor() {
    this.provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/4c8f4a87f45c4e9d9a655e66dfacfcd9');
  }

  async initialize(provider: ethers.providers.Web3Provider, signer: ethers.Signer): Promise<void> {
    this.provider = provider;
    this.signer = signer;
    console.log('üë§ UserTradingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê)');
  }

  // –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú (–ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê)
  async buyToken(tokenSymbol: string, usdtAmount: string): Promise<UserTradeResult> {
    if (!this.signer) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
    }

    try {
      console.log(`üí∞ –ü–†–û–°–¢–ê–Ø –ø–æ–∫—É–ø–∫–∞ ${tokenSymbol} –∑–∞ ${usdtAmount} USDT...`);
      const userAddress = await this.signer.getAddress();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
      const { priceService } = await import('./priceService');
      const tokenPrice = priceService.getPrice(tokenSymbol) || 
        (tokenSymbol === 'BTC' ? 110203 : 
         tokenSymbol === 'ETH' ? 3000 : 1);
      
      const tokenAmount = parseFloat(usdtAmount) / tokenPrice;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { userBalanceService } = await import('./userBalanceService');
      const usdtBalance = userBalanceService.getAvailableBalance(userAddress, 'USDT');
      if (usdtBalance < parseFloat(usdtAmount)) {
        return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT' };
      }

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ä–¥–µ—Ä —É –±–æ—Ç–æ–≤
      const { realBotService } = await import('./realBotService');
      const orderBook = realBotService.getOrderBook();
      
      // –ò—â–µ–º ask –æ—Ä–¥–µ—Ä (–ø—Ä–æ–¥–∞–∂–∞) —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ü–µ–Ω–æ–π
      const suitableAsk = orderBook.asks.find(ask => 
        ask.token === tokenSymbol && 
        ask.price <= tokenPrice * 1.01 && // 1% —Å–ø—Ä–µ–¥
        ask.amount >= tokenAmount * 0.5 // –º–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      );

      if (!suitableAsk) {
        return { success: false, error: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏' };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
      const actualAmount = Math.min(tokenAmount, suitableAsk.amount);
      const actualPrice = suitableAsk.price;
      const totalCost = actualAmount * actualPrice;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      userBalanceService.subtractTokens(userAddress, 'USDT', totalCost);
      userBalanceService.addTokens(userAddress, tokenSymbol, actualAmount);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
      const { realBotService: botService } = await import('./realBotService');
      botService.updateBotBalance(suitableAsk.botId, 'USDT', totalCost);
      botService.updateBotBalance(suitableAsk.botId, tokenSymbol, -actualAmount);

      console.log(`‚úÖ –ü–†–û–°–¢–ê–Ø –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: ${actualAmount.toFixed(6)} ${tokenSymbol} –∑–∞ $${totalCost.toFixed(2)}`);
      
      return {
        success: true,
        txHash: `simple_${Date.now()}`,
        gasUsed: '0'
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∫–∏:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –ü–†–û–î–ê–ñ–ê –¢–û–ö–ï–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú (–ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê)
  async sellToken(tokenSymbol: string, tokenAmount: string): Promise<UserTradeResult> {
    if (!this.signer) {
      return { success: false, error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
    }

    try {
      console.log(`üí∏ –ü–†–û–°–¢–ê–Ø –ø—Ä–æ–¥–∞–∂–∞ ${tokenAmount} ${tokenSymbol}...`);
      const userAddress = await this.signer.getAddress();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ userBalanceService
      const { userBalanceService } = await import('./userBalanceService');
      const availableBalance = userBalanceService.getAvailableBalance(userAddress, tokenSymbol);
      
      if (availableBalance < parseFloat(tokenAmount)) {
        return { success: false, error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${tokenSymbol}. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance}` };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
      const { priceService } = await import('./priceService');
      const tokenPrice = priceService.getPrice(tokenSymbol) || 
        (tokenSymbol === 'BTC' ? 110203 : 
         tokenSymbol === 'ETH' ? 3000 : 1);
      
      const usdtAmount = parseFloat(tokenAmount) * tokenPrice;
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π bid –æ—Ä–¥–µ—Ä —É –±–æ—Ç–æ–≤
      const { realBotService } = await import('./realBotService');
      const orderBook = realBotService.getOrderBook();
      
      // –ò—â–µ–º bid –æ—Ä–¥–µ—Ä (–ø–æ–∫—É–ø–∫–∞) —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ü–µ–Ω–æ–π
      const suitableBid = orderBook.bids.find(bid => 
        bid.token === tokenSymbol && 
        bid.price >= tokenPrice * 0.99 && // 1% —Å–ø—Ä–µ–¥
        bid.amount >= parseFloat(tokenAmount) * 0.5 // –º–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      );

      if (!suitableBid) {
        return { success: false, error: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏' };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
      const actualAmount = Math.min(parseFloat(tokenAmount), suitableBid.amount);
      const actualPrice = suitableBid.price;
      const totalUsdt = actualAmount * actualPrice;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
      userBalanceService.subtractTokens(userAddress, tokenSymbol, actualAmount);
      userBalanceService.addTokens(userAddress, 'USDT', totalUsdt);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
      const { realBotService: botService } = await import('./realBotService');
      botService.updateBotBalance(suitableBid.botId, 'USDT', -totalUsdt);
      botService.updateBotBalance(suitableBid.botId, tokenSymbol, actualAmount);

      console.log(`‚úÖ –ü–†–û–°–¢–ê–Ø –ø—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: ${totalUsdt.toFixed(2)} USDT –∑–∞ ${actualAmount.toFixed(6)} ${tokenSymbol}`);
      
      return {
        success: true,
        txHash: `simple_${Date.now()}`,
        gasUsed: '0'
      };

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏:', error);
      return {
        success: false,
        error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async getTokenBalance(tokenSymbol: string): Promise<string> {
    if (!this.signer) return '0';
    
    try {
      const userAddress = await this.signer.getAddress();
      const { userBalanceService } = await import('./userBalanceService');
      const balance = userBalanceService.getAvailableBalance(userAddress, tokenSymbol);
      return balance.toString();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return '0';
    }
  }
}

export const userTradingService = new UserTradingService();