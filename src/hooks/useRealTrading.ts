import { useState, useEffect, useCallback } from 'react';
import { useWeb3 } from '../providers/RealWeb3Provider';
import { realTradingService } from '../services/realTradingService';
import { simulatedTradingService } from '../services/simulatedTradingService';

/**
 * @title useRealTrading
 * @dev –•—É–∫ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
 * –ù–∏–∫–∞–∫–∏—Ö –º–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞!
 */
export interface RealTokenBalance {
  symbol: string;
  balance: number;
  decimals: number;
  address: string;
  name: string;
  valueUSD: number;
}

export interface RealPosition {
  symbol: string;
  amount: number;
  entryPrice: number;
  currentPrice: number;
  pnl: number;
  pnlPercent: number;
  timestamp: number;
}

export interface RealTrade {
  id: string;
  symbol: string;
  side: 'buy' | 'sell';
  amount: number;
  price: number;
  timestamp: number;
  txHash: string;
  status: 'pending' | 'confirmed' | 'failed';
}

export const useRealTrading = () => {
  const { address, signer, provider } = useWeb3();
  const [balances, setBalances] = useState<RealTokenBalance[]>([]);
  const [positions, setPositions] = useState<RealPosition[]>([]);
  const [trades, setTrades] = useState<RealTrade[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  useEffect(() => {
    if (address && signer && provider && !isInitialized) {
      const initService = async () => {
        try {
          setLoading(true);
          console.log('üîÑ Initializing real trading service...');
          console.log('Provider:', provider);
          console.log('Signer:', signer);
          console.log('Address:', address);
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞
          await realTradingService.initialize(provider, signer);
          await simulatedTradingService.initialize(provider, signer);
          setIsInitialized(true);
          console.log('‚úÖ Real trading service initialized successfully');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–µ–º USDT –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          try {
            await simulatedTradingService.grantInitialUSDT(address);
            console.log('‚úÖ 10,000 USDT automatically granted to user');
          } catch (usdtError) {
            console.log('‚ö†Ô∏è Auto USDT grant failed (user might already have balance):', usdtError.message);
          }
        } catch (err) {
          console.error('‚ùå Failed to initialize real trading service:', err);
          setError('Failed to initialize trading service: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      initService();
    }
  }, [address, signer, provider, isInitialized]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadData = useCallback(async () => {
    if (!address || !isInitialized) return;

    try {
      setLoading(true);
      setError(null);

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
          console.log('üîÑ Loading balances from simulated service...');
          console.log('Simulated service initialized:', simulatedTradingService.provider !== null);
          
          const [realBalances, realTrades] = await Promise.all([
            simulatedTradingService.getRealBalances(address),
            realTradingService.getRealTrades(address)
          ]);
          
          console.log('üìä Loaded balances:', realBalances);

      setBalances(realBalances);
      setTrades(realTrades);

      console.log('‚úÖ Real contract data loaded:', {
        balances: realBalances.length,
        trades: realTrades.length
      });
    } catch (err) {
      console.error('‚ùå Error loading real contract data:', err);
      setError('Failed to load trading data from contracts');
    } finally {
      setLoading(false);
    }
  }, [address, isInitialized]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (isInitialized) {
      console.log('üîÑ Auto-loading data...');
      loadData();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      const interval = setInterval(() => {
        console.log('üîÑ Interval loading data...');
        loadData();
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [isInitialized, loadData]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
  useEffect(() => {
    if (address && isInitialized) {
      console.log('üîÑ Address changed, loading data...');
      loadData();
    }
  }, [address, isInitialized, loadData]);

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
  const getBalance = useCallback((symbol: string): number => {
    const token = balances.find(b => b.symbol === symbol);
    return token ? token.balance : 0;
  }, [balances]);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞—Ç—å
  const canSell = useCallback((symbol: string, amount: number): boolean => {
    const balance = getBalance(symbol);
    return balance >= amount;
  }, [getBalance]);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏—Ç—å
  const canBuy = useCallback((symbol: string, amount: number, price: number): boolean => {
    const usdtBalance = getBalance('USDT');
    const totalCost = amount * price;
    return usdtBalance >= totalCost;
  }, [getBalance]);

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
  const executeTrade = useCallback(async (
    side: 'buy' | 'sell',
    symbol: string,
    amount: number,
    price: number
  ): Promise<boolean> => {
    if (!address || !isInitialized) {
      setError('Trading service not initialized');
      return false;
    }

    try {
      setLoading(true);
      setError(null);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (side === 'sell') {
        if (!canSell(symbol, amount)) {
          setError(`Insufficient ${symbol} balance`);
          return false;
        }
      } else {
        if (!canBuy(symbol, amount, price)) {
          setError('Insufficient USDT balance');
          return false;
        }
      }

          // –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ç–æ—Ä–≥–æ–≤–ª—é —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
          const result = await simulatedTradingService.executeSimulatedTrade(
            address,
            side === 'buy' ? 'USDT' : symbol, // tokenIn
            side === 'buy' ? symbol : 'USDT', // tokenOut
            amount,
            price // minAmountOut
          );

      if (result.success) {
        console.log('‚úÖ Real trade executed via smart contract:', result.txHash);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        await loadData();
        
        return true;
      } else {
        setError(result.error || 'Trade execution failed');
        return false;
      }
    } catch (err) {
      console.error('‚ùå Trade execution error:', err);
      setError('Trade execution failed');
      return false;
    } finally {
      setLoading(false);
    }
  }, [address, isInitialized, canSell, canBuy, loadData]);

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
  const getTotalValue = useCallback(async (): Promise<number> => {
    if (!address || !isInitialized) return 0;

        try {
          return await simulatedTradingService.getTotalPortfolioValue(address);
        } catch (err) {
          console.error('Error getting total portfolio value:', err);
          return 0;
        }
  }, [address, isInitialized]);

  // –ü–æ–ª—É—á–∏—Ç—å PnL
  const getTotalPnl = useCallback((): number => {
    return positions.reduce((total, pos) => total + pos.pnl, 0);
  }, [positions]);

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç PnL
  const getTotalPnlPercent = useCallback((): number => {
    const totalValue = balances.reduce((total, token) => total + token.valueUSD, 0);
    if (totalValue === 0) return 0;
    return (getTotalPnl() / totalValue) * 100;
  }, [balances, getTotalPnl]);

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
  const getTokenPrice = useCallback(async (symbol: string): Promise<number> => {
    if (!isInitialized) return 0;

    try {
      // –î–ª—è USDT –≤—Å–µ–≥–¥–∞ 1.0
      if (symbol === 'USDT') return 1.0;
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      return await realTradingService.getRealTokenPrice(symbol);
    } catch (err) {
      console.error('Error getting token price:', err);
      return 0;
    }
  }, [isInitialized]);

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  const refreshData = useCallback(async () => {
    if (isInitialized) {
      await loadData();
    }
  }, [isInitialized, loadData]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    balances,
    positions,
    trades,
    loading,
    error,
    isInitialized,
    
    // –§—É–Ω–∫—Ü–∏–∏
    getBalance,
    canSell,
    canBuy,
    executeTrade,
    getTotalValue,
    getTotalPnl,
    getTotalPnlPercent,
    getTokenPrice,
    refreshData,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    setError: (error: string | null) => setError(error)
  };
};